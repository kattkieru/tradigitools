//*****************************************************************
//
// cie_tradigitools.mel
//
// Copyright (C) 2007-2021 Skeletal Studios
// All rights reserved.
//
// 15 January 2013 -- Added support for Maya 2013 and
//					  2013 Extension
//
//*****************************************************************


//*****************************************************************
// GLOBAL VARIABLES
//*****************************************************************
global string $g_cieATBWindowTitle = "tradigiTOOLS";
global string $g_cieATBAboutWindowTitle = "About tradigiTOOLS";

global string $g_cieMainUIWindowName = "cie_tradigiTOOLS_UI";
global string $g_cieDockControlName = "cie_dockControl_UI";
global string $g_cieAboutUIWindowName = "cie_tradigiTOOLS_AboutUI";

global int $g_cieATBInitialized = false;

// General Options
global string $g_cieATBRestoreLastWindowFocusPath = "";
global string $g_cieATBEnableScriptJobMenuPath = "";

// Breakdown Options
global string $g_cieATBInvalidBreakdownAttr = "skipAll";
global int $g_cieATBIgnoreRippleCheckFlag = false;
global int $g_cieATBKeySelectedAttrFlag = false;
global string $g_cieATBBreakdownMode = "overwrite";
global int $g_cieATBTickDrawSpecialFlag = false;

// Camera Options
global string $g_cieATBIncludeOrthoMenuPath = "";

// Breakdown Control Paths
global string $g_cieATBBreakdownSliderPath = "";
global string $g_cieATBBreakdownFieldPath = "";
global string $g_cieATBSetKeyRBGPath = "";

// Retiming Control Paths
global string $g_cieATBRetimingNextKeyPath = "";
global string $g_cieATBRetimingFieldPath = "";
global string $g_cieATBRetimingIncrCBPath = "";
global string $g_cieATBRetimingInfoTFPath = "";
global string $g_cieATBRetimingInfoCBPath = "";

// Shot Mask Control Paths
global string $g_cieATBShotMaskGateRBG = "";

global string $g_cieATBShotMaskTitleField = "";
global string $g_cieATBShotMaskText1Field = "";
global string $g_cieATBShotMaskText2Field = "";
global string $g_cieATBShotMaskRootObjField = "";

global string $g_cieATBShotMaskGeoOnlyCB = "";
global string $g_cieATBShotMaskDisplayCB = "";
global string $g_cieATBShotMaskAllPlayblastOptionsCB = "";

global string $g_cieATBShotMaskDisplaySideEdgesCB = "";
global string $g_cieATBShotMaskDisplayFrameCounterCB = "";
global string $g_cieATBShotMaskDisplayLtbxCB = "";
global string $g_cieATBShotMaskDisplayTextCB = "";
global string $g_cieATBShotMaskDisplayTitleBarCB = "";
global string $g_cieATBShotMaskDisplaySubTitleBarCB = "";

global string $g_cieATBShotMaskEdgePercentField = "";
global string $g_cieATBShotMaskCounterScaleField = "";
global string $g_cieATBShotMaskTitleScaleField = "";
global string $g_cieATBShotMaskSubtitleScaleField = "";
global string $g_cieATBShotMaskUseUniformTranspCB = "";
global string $g_cieATBShotMaskBorderColorCSG = "";
global string $g_cieATBShotMaskBorderTranspCSG = "";
global string $g_cieATBShotMaskTextColorCSG = "";
global string $g_cieATBShotMaskTextTranspCSG = "";
global string $g_cieATBShotMaskKeyColorCSG = "";
global string $g_cieATBShotMaskKeyTranspCSG = "";
global string $g_cieATBShotMaskBkDnColorCSG = "";
global string $g_cieATBShotMaskBkDnTranspCSG = "";
global string $g_cieATBShotMaskLtbxColorCSG = "";
global string $g_cieATBShotMaskLtbxTranspCSG = "";

// Shot Mask Variables
global string $g_cieATBShotMaskRootObj = "";
global string $g_cieATBShotMaskDetailsName = "atbShotMaskDetails";

// Curve Cleaner Control Paths
global string $g_cieATBCrvCleanerStartEndCB = "";
global string $g_cieATBCrvCleanerFactorFSG = "";
global string $g_cieATBCrvCleanerSoftnessFSG = "";
global string $g_cieATBCrvCleanerSoftenAllCB = "";

// Camera Control Paths
global string $g_cieATBShotCamNameTFPath = "";
global string $g_cieATBShotCamPopupMenuPath = "";

// Quick Button Control Paths
global string $g_cieATBTangentTimelineCB = "";
global string $g_cieATBTangentToggleButton = "";
global string $g_cieATBModifyTangentIcon = "pickOtherObj.xpm";

// Shot Cam List
global string $g_cieATBShotCamList[];

// Script Job Numbers
global int $g_cieATBTimeChangeJobNum = -1;
global int $g_cieATBSceneOpenedJobNum = -1;

// sizes of the main window
global int $g_cieUIMainWindowHeight = 700;
global int $g_cieUIMainWindowWidth = 270;

//*****************************************************************
// GLOBAL PROCEDURES
//*****************************************************************

//*****************************************************************
// Name: cie_tradigiTOOLS
// Desc: tradigiTOOLS Entry point
//*****************************************************************
global proc cie_tradigitools()
{
	global string $g_cieMainUIWindowName;
	global string $g_cieDockControlName;
	global string $g_cieATBWindowTitle;
	
	if( `dockControl -ex $g_cieDockControlName` )
		dockControl -e -vis 1
			$g_cieDockControlName;
	else {
		cie_atbCreateUI();
		cie_atbCreateScriptJobs();
	}	
	// Update the displayed current tangent type (Quick Buttons)
	cie_atbSetCurrentTangentImage();
	
	// Update the shot mask details if necessary
	cie_atbShotMaskSyncDetails();
}

//*****************************************************************
// Name: cie_atbCreateUI
// Desc: Creates the main ANIMToolbox UI
//*****************************************************************
global proc cie_atbCreateUI()
{
	global string $g_cieMainUIWindowName;
	global string $g_cieATBWindowTitle;
	global int $g_cieATBInitialized;
	global string $g_cieDockControlName;
	
	global int $g_cieUIMainWindowHeight;
	global int $g_cieUIMainWindowWidth;
	
	if( `dockControl -ex $g_cieDockControlName` )
		deleteUI $g_cieDockControlName;

	if( `window -ex $g_cieMainUIWindowName` )
			deleteUI $g_cieMainUIWindowName;
	
	window
		-title $g_cieATBWindowTitle
		-retain
		-width $g_cieUIMainWindowWidth
		-height $g_cieUIMainWindowHeight
		-menuBar true
		-menuBarVisible true
		$g_cieMainUIWindowName;
	
	cie_atbCreateMenuBar( $g_cieMainUIWindowName );
	cie_atbCreateLayout( $g_cieMainUIWindowName );
	
	if( $g_cieATBInitialized ) {
		// popping it out as a floater first, then docking it, fixes some of the bugs
		// inherent in dock controls that are too long for their docked place
		
		dockControl -area "right" -allowedArea "left" -enablePopupOption 1
			-allowedArea "right" -content $g_cieMainUIWindowName -label $g_cieATBWindowTitle
			-width $g_cieUIMainWindowWidth -height $g_cieUIMainWindowHeight -fl 1
			-visible 0
			$g_cieDockControlName;

		dockControl -e -fl 0 $g_cieDockControlName;

		// if you don't do this, then make it visible, it gets set to some random fat width
		evalDeferred("dockControl -e -w 350 " + $g_cieDockControlName);
		evalDeferred("dockControl -e -visible 1 " + $g_cieDockControlName);
	}
	else
		$g_cieATBInitialized = true;
}

//*****************************************************************
// Name: cie_atbCreateMenuBar
// Desc: Creates the ANIMToolbox menu bar
//*****************************************************************
global proc cie_atbCreateMenuBar( string $parentWindow )
{
	global string $g_cieATBRestoreLastWindowFocusPath;
	global string $g_cieATBEnableScriptJobMenuPath;
	global string $g_cieATBInvalidBreakdownAttr;
	global string $g_cieATBIncludeOrthoMenuPath;
	
	menu -p $parentWindow -l "Options" -tearOff true optionsMenu;
	
		// General Options
		menuItem -l "General" -subMenu true -tearOff true generalOptionsMenuItem;
			$g_cieATBEnableScriptJobMenuPath = `menuItem -l "Enable ScriptJobs" -checkBox true -c "cie_atbUpdateScriptJobState()"`;
			$g_cieATBRestoreLastWindowFocusPath = `menuItem -l "Restore Window Focus" -checkBox true`;
			
			setParent -menu ..;
	
		// Breakdown Section Options
		menuItem -l "Breakdowns" -subMenu true -tearOff true breakdownOptionsMenuItem;
			radioMenuItemCollection;
			menuItem -l "Ignore All" -radioButton on -c "$g_cieATBInvalidBreakdownAttr = \"skipAll\"";
			menuItem -l "Ignore Object" -radioButton off -c "$g_cieATBInvalidBreakdownAttr = \"skipObject\"";
			menuItem -l "Ignore Attribute" -radioButton off -c "$g_cieATBInvalidBreakdownAttr = \"skipAttr\"";
			
			menuItem -d true;
			
			menuItem -l "Skip Ripple Check" -checkBox false -c "cie_atbIgnoreRippleCheckToggle()";
			
			setParent -menu ..;
		
		// Camera Section Options
		menuItem -l "Camera" -subMenu true -tearOff true cameraOptionsMenuItem;
			$g_cieATBIncludeOrthoMenuPath = `menuItem -l "Include Ortho Cameras" -checkBox false`;
			
			
	menu -p $parentWindow -l "Help" -hm true helpMenu;
		menuItem -l "About tradigiTOOLS" -c "cie_atbDisplayAboutWindow()";


	setParent $parentWindow;
		
}

//*****************************************************************
// Name: cie_atbCreateLayout
// Desc: Handles the main layout creation.  Seperates the
//       various regions for simpler modification
//*****************************************************************
global proc cie_atbCreateLayout( string $parentWindow )
{	
	string $mainTabs = `tabLayout
						 -cr true
						 -scr true
				         -innerMarginWidth 0
				         -innerMarginHeight 0
				         mainTabLayout`;

	string $topAttach;
	
	// General Tab Layout
	string $tab1Form = `formLayout -p $mainTabs tab1Form`;
	
	$topAttach = cie_atbCreateBreakdownLayout( $tab1Form );
	
	$topAttach = cie_atbCreateRetimingLayout( $tab1Form, $topAttach );
	
	$topAttach = cie_atbCreateCameraLayout( $tab1Form, $topAttach );
	
	$topAttach = cie_atbCreateQuickButtonsLayout( $tab1Form, $topAttach );
	
	setParent..;
	
	
	// Advanced Tab Layout	
	string $tab2Form = `formLayout tab2Layout`;
		
	$topAttach = cie_atbCreateCurveCleanerLayout( $tab2Form, "" );
	
	setParent..;
	
	// ANIMBlast Layout
	string $tab3Form = `formLayout tab3Layout`;
	
	$topAttach = cie_atbCreateShotMaskLayout( $tab3Form, "" );
	
	setParent..;
	
	
	tabLayout -e
		      -tabLabel $tab1Form "General"
			  -tabLabel $tab2Form "Advanced"
			  -tabLabel $tab3Form "ANIMBlast"
			  $mainTabs;
	
	tabLayout -e -sti 1 $mainTabs;
	
}

//*****************************************************************
// Name: cie_atbCreateBreakdownLayout
// Desc: Creates the breakdown UI
//*****************************************************************
global proc string cie_atbCreateBreakdownLayout( string $parentLayout )
{
	global int $g_cieATBKeySelectedAttrFlag;
	global string $g_cieATBBreakdownMode;
	global int $g_cieATBTickDrawSpecialFlag;
	
	global string $g_cieATBBreakdownSliderPath;
	global string $g_cieATBBreakdownFieldPath;
	global string $g_cieATBSetKeyRBGPath;

	global int $g_cieUIMainWindowWidth;
	
	//##CURRENT
	int $bdButtonWidth = 20;
	
	string $breakdownFrame = `frameLayout -p $parentLayout 
		                                  -l "Key / Breakdown"
								          -borderStyle "etchedIn"
										  -collapsable true
										  -collapse false
										  -width $g_cieUIMainWindowWidth
								          breakdownFrame`;
	formLayout -e
		       -af $breakdownFrame "top" 0
			   -af $breakdownFrame "left" 0
			   -af $breakdownFrame "right" 0
			   $parentLayout;
	
	string $breakdownForm = `formLayout -p $breakdownFrame breakdownForm`;
	
	string $separator1 = `separator -style "out"`;
	
	// Keys / Breakdowns Tick Color
	string $tickColorRBG = `radioButtonGrp -sl 1
		                                   -labelArray2 "Keys" "Breakdowns"
										   -nrb 2
										   -cw 1 75
	                                       -ann "Determines the color of the ticks on the timeslider. (Keyframe = red, Breakdown = green)"
		                                   -on1 "$g_cieATBTickDrawSpecialFlag = false"
									       -on2 "$g_cieATBTickDrawSpecialFlag = true"
		                                   tickColorRadioButtonGrp`;
	
	// Breakdown "quick buttons"
	string $bdButton1 = `button -l "<<<" -h 26 -w $bdButtonWidth -c "cie_atbSetBreakdown(0.14)" -ann "Heavily favour the previous key" breakdownButton1`;
	string $bdButton2 = `button -l "<<" -h 24 -w $bdButtonWidth -c "cie_atbSetBreakdown(0.20)" -ann "Favour the previous key" breakdownButton2`;
	string $bdButton3 = `button -l "<" -h 23 -w $bdButtonWidth -c "cie_atbSetBreakdown(0.333)" -ann "Slightly favour the previous key" breakdownButton3`;
	string $bdButton4 = `button -l "< >" -h 22 -w $bdButtonWidth -c "cie_atbSetBreakdown(0.5)" -ann "Equally favour the previous and next key" breakdownButton4`;
	string $bdButton5 = `button -l ">" -h 23 -w $bdButtonWidth -c "cie_atbSetBreakdown(0.666)" -ann "Slightly favour the next key" breakdownButton5`;
	string $bdButton6 = `button -l ">>" -h 24 -w $bdButtonWidth -c "cie_atbSetBreakdown(0.80)" -ann "Favour the next key" breakdownButton6`;
	string $bdButton7 = `button -l ">>>" -h 26 -w $bdButtonWidth -c "cie_atbSetBreakdown(0.86)" -ann "Heavily favour the next key" breakdownButton7`;

	// Breakdown weighting manual controls (slider and intField)
	$g_cieATBBreakdownSliderPath = `intSlider -v 0
		                                      -min -100
									          -max 100
								          	  -cc "cie_atbSetBreakdown(-1.0)"
									          -dc "cie_atbBreakdownWeightFromSlider()"
									          weightSlider`;
	
	$g_cieATBBreakdownFieldPath = `intField -v 0
		                                    -min -100
									        -max 100
									        -cc "cie_atbSetBreakdown(-2.0)"
									        -dc "cie_atbBreakdownWeightFromField()"
									        -s 1
									        weightField`;
	
	string $weightText1 = `text -l "-100    <------" weightText1`;
	string $weightText2 = `text -l "------>    100" weightText2`;
	
	string $separator3 = `separator -style "in"`;
	
	// Overwrite/Ripple mode radio buttons
	string $modeRBG = `radioButtonGrp -sl 1
		                              -labelArray2 "Overwrite Mode" "Ripple Mode"
									  -nrb 2
	                                  -ann ("Overwrite overwrites the key at the current frame. In Ripple Mode, keys at the current frame" +
			                                "are shifted right and a new breakdown is put in their place.")
		                              -on1 "$g_cieATBBreakdownMode = \"overwrite\""
									  -on2 "$g_cieATBBreakdownMode = \"ripple\""
		                              modeRadioButtonGrp`;
	
	// Selected Attributes only
	string $selectedAttrCB = `checkBox -l "Key selected attributes only"
		                     -ann "Toggle to key selected channels only.  Has no effect in Ripple Mode."
		                     -onCommand "$g_cieATBKeySelectedAttrFlag = true"
							 -offCommand "$g_cieATBKeySelectedAttrFlag = false"
							 selAttrCheckBox`;

	string $separator4 = `separator -style "out"`;
	string $separator5 = `separator -style "out"`;	
					
	string $keyframeButton = `button -l "Key" 
									 -c "cie_atbSetKeyframe(false)" 
									 -ann "Set a key at the current frame and set the tick color to red"
									 keyframeButton`;
	
	string $breakdownButton = `button -l "Breakdown" 
									  -c "cie_atbSetKeyframe(true)" 
									  -ann "Set a key at the current frame and set the tick color to green"
									  breakdownButton`;
	
	string $redTickButton = `button -l "R" 
									-c "cieSetKeyframe -e -tds false; cie_atbRestoreWindowFocus();" 
									-ann "Sets the tick color to Red"
									redTickButton`;
	
	string $greenTickButton = `button -l "G" 
									  -c "cieSetKeyframe -e -tds true; cie_atbRestoreWindowFocus();" 
									  -ann "Sets the tick color to Green"
									  greenTickGreen`;
	
	$g_cieATBSetKeyRBGPath = `radioButtonGrp -sl 1
		                                     -labelArray2 "Key All" "Skip Unkeyed"
										     -nrb 2
										     -cw 1 75
	                                         -ann "Determines if a key will be set on all attributes, or just those that are already keyed"
		                                     -on1 ""
									         -on2 ""
		                                     setKeyRadioButtonGrp`;
	
	// Layout the controls
	formLayout -e
		       -af $separator1 "top" 0
			   -af $separator1 "left" 0
			   -af $separator1 "right" 0

			   -ac $tickColorRBG "top" 2 $separator1
			   -af $tickColorRBG "left" 2
			   -af $tickColorRBG "right" 2		   

		       -ac $bdButton1 "top" 2 $tickColorRBG
			   -af $bdButton1 "left" 2
			   -ap $bdButton1 "right" 0 13

		       -aoc $bdButton2 "top" 0 $bdButton1
			   -ac $bdButton2 "left" 2 $bdButton1
			   -ap $bdButton2 "right" 0 27

		       -aoc $bdButton3 "top" 0 $bdButton1
			   -ac $bdButton3 "left" 2 $bdButton2
			   -ap $bdButton3 "right" 0 41

		       -aoc $bdButton4 "top" 0 $bdButton1
			   -ac $bdButton4 "left" 2 $bdButton3
			   -ap $bdButton4 "right" 0 59

		       -aoc $bdButton5 "top" 0 $bdButton1
			   -ac $bdButton5 "left" 2 $bdButton4
			   -ap $bdButton5 "right" 0 73

		       -aoc $bdButton6 "top" 0 $bdButton1
			   -ac $bdButton6 "left" 2 $bdButton5
			   -ap $bdButton6 "right" 0 87

		       -aoc $bdButton7 "top" 0 $bdButton1
			   -ac $bdButton7 "left" 2 $bdButton6
			   -af $bdButton7 "right" 2

		       -ac $g_cieATBBreakdownSliderPath "top" 4 $bdButton1
			   -af $g_cieATBBreakdownSliderPath "left" 2
			   -af $g_cieATBBreakdownSliderPath "right" 2

		       -aoc $weightText1 "top" 2 $g_cieATBBreakdownFieldPath
			   -af $weightText1 "left" 12
			   -ap $weightText1 "right" 0 40

		       -ac $g_cieATBBreakdownFieldPath "top" 4 $g_cieATBBreakdownSliderPath
			   -aoc $g_cieATBBreakdownFieldPath "left" -4 $bdButton4
			   -aoc $g_cieATBBreakdownFieldPath "right" -4 $bdButton4

		       -aoc $weightText2 "top" 2 $g_cieATBBreakdownFieldPath
			   -af $weightText2 "right" 12

		       -ac $separator3 "top" 4 $g_cieATBBreakdownFieldPath
			   -af $separator3 "left" 0
			   -af $separator3 "right" 0

		       -ac $modeRBG "top" 2 $separator3
			   -af $modeRBG "left" 2			   
			   
			   -ac $selectedAttrCB "top" 2 $modeRBG
			   -af $selectedAttrCB "left" 2
			   
		       -ac $separator4 "top" 4 $selectedAttrCB
			   -af $separator4 "left" 0
			   -af $separator4 "right" 0
			   
			   -ac $separator5 "top" 1 $separator4
			   -af $separator5 "left" 0
			   -af $separator5 "right" 0

		       -ac $keyframeButton "top" 2 $separator5
			   -af $keyframeButton "left" 2
			   -ap $keyframeButton "right" 0 35

		       -aoc $redTickButton "top" 0 $keyframeButton
			   -ac $redTickButton "left" 2 $keyframeButton
			   -ap $redTickButton "right" 1 50
			   
			   -aoc $greenTickButton "top" 0 $keyframeButton
			   -ac $greenTickButton "left" 1 $redTickButton
			   -ac $greenTickButton "right" 2 $breakdownButton
			   
			   -aoc $breakdownButton "top" 0 $keyframeButton
			   -ap $breakdownButton "left" 0 65
			   -af $breakdownButton "right" 2
			   
			   -ac $g_cieATBSetKeyRBGPath "top" 2 $keyframeButton
			   -af $g_cieATBSetKeyRBGPath "left" 2
			   -af $g_cieATBSetKeyRBGPath "bottom" 2
			   
			   $breakdownForm;
	
	setParent $parentLayout;
	
	// Return the new child of the parent layout
	return $breakdownFrame;
}

//*****************************************************************
// Name: cie_atbCreateRetimingLayout
// Desc: Creates the Retiming UI
//*****************************************************************
global proc string cie_atbCreateRetimingLayout( string $parentLayout, string $topAttach )
{
	global string $g_cieATBRetimingNextKeyPath;
	global string $g_cieATBRetimingFieldPath;
	global string $g_cieATBRetimingIncrCBPath;
	global string $g_cieATBRetimingInfoTFPath;
	global string $g_cieATBRetimingInfoCBPath;
	
	string $retimingFrame = `frameLayout -p $parentLayout 
		                         -l "Timing"
								 -borderStyle "etchedIn"
								 -collapsable true
								 -collapse false
								 retimingFrame`;
	formLayout -e
	           -ac $retimingFrame "top" 0 $topAttach
		       -af $retimingFrame "left" 0
		       -af $retimingFrame "right" 0
		       $parentLayout;
	
	string $retimingForm = `formLayout -p $retimingFrame retimingForm`;
	
	string $separator1 = `separator -style "out"`;
	
	// Post-Retiming Playhead Options
	$g_cieATBRetimingNextKeyPath = `checkBox -l "Move to Next"
	                                         -ann "Moves the playhead to the next key/breakdown following a timing change"
								             -v false
		                                     retimingNextKeyCB`;
	
	// Absolute Retiming "quick" buttons
	string $timingButton1 = `button -l "1f" -h 22 -c "cie_atbRetime(false, 1)" -ann "Alter timing between keys to 1 frame" timingButton1`;
	string $timingButton2 = `button -l "2f" -h 22 -c "cie_atbRetime(false, 2)" -ann "Alter timing between keys to 2 frames" timingButton2`;
	string $timingButton3 = `button -l "3f" -h 22 -c "cie_atbRetime(false, 3)" -ann "Alter timing between keys to 3 frames" timingButton3`;
	string $timingButton4 = `button -l "4f" -h 22 -c "cie_atbRetime(false, 4)" -ann "Alter timing between keys to 4 frames" timingButton4`;
	string $timingButton5 = `button -l "5f" -h 22 -c "cie_atbRetime(false, 5)" -ann "Alter timing between keys to 5 frames" timingButton5`;
	string $timingButton6 = `button -l "6f" -h 22 -c "cie_atbRetime(false, 6)" -ann "Alter timing between keys to 6 frames" timingButton6`;
	
	// Relative Retiming "quick" buttons
	string $timingDecrButton1 = `button -l "-1f" -h 22 -c "cie_atbRetime(true, -1)" -ann "Decrement timing by 1 frame" timingDecrButton1`;
	string $timingDecrButton2 = `button -l "-2f" -h 22 -c "cie_atbRetime(true, -2)" -ann "Decrement timing by 2 frame" timingDecrButton2`;
	string $timingIncrButton1 = `button -l "+1f" -h 22 -c "cie_atbRetime(true, 1)" -ann "Increment timing by 1 frame" timingIncrButton1`;
	string $timingIncrButton2 = `button -l "+2f" -h 22 -c "cie_atbRetime(true, 2)" -ann "Increment timing by 2 frame" timingIncrButton2`;
	
	// Manual Retiming controls (intField)
	$g_cieATBRetimingFieldPath = `intField -min -100
		                              	   -max 100
									  	   -value 1
										   -s 1
									  	   -cc ""
									  	   retimingField`;
	
	// Manual Retiming controls (manual update button)
	string $manualRetimingButton = `button -l "Retime"
		                                   -w 68
										   -c "cie_atbRetimeByField()"
										   -ann "Alters the timing by the specified value"
										   manualRetimingButton`;
	
	// Manual Retiming controls (Incremental timing check box)
	$g_cieATBRetimingIncrCBPath = `checkBox -l "Increment"
		                                    -w 78
	                                  		-ann "Indicates whether the entry will be considered incremental"
											-v false
		                              		incrementalCB`;
	
	string $separator3 = `separator -style "in"`;
	
	// Current timing info
	$g_cieATBRetimingInfoCBPath = `checkBox -l "Auto" -w 49 -v true timingInfoCB`;
	$g_cieATBRetimingInfoTFPath = `textField -editable false timingInfoTF`;
	string $timingInfoButton = `button -l "?" -w 46 -c "cie_atbUpdateRetimingInfo(); restoreLastPanelWithFocus();" -ann "Click to see the current strip for retiming" timingInfoButton`;
												 
	
	// Layout the controls
	formLayout -e
		       -af $separator1 "top" 0
			   -af $separator1 "left" 0
			   -af $separator1 "right" 0

			   -ac $g_cieATBRetimingNextKeyPath "top" 2 $separator1
			   -af $g_cieATBRetimingNextKeyPath "left" 2
			   
		       -ac $timingButton1 "top" 2 $g_cieATBRetimingNextKeyPath
			   -af $timingButton1 "left" 2 
			   -ap $timingButton1 "right" 0 16

		       -aoc $timingButton2 "top" 0 $timingButton1
			   -ac $timingButton2 "left" 2 $timingButton1 
			   -ap $timingButton2 "right" 0 33

		       -aoc $timingButton3 "top" 0 $timingButton1
			   -ac $timingButton3 "left" 2 $timingButton2 
			   -ap $timingButton3 "right" 0 50

		       -aoc $timingButton4 "top" 0 $timingButton1
			   -ac $timingButton4 "left" 2 $timingButton3 
			   -ap $timingButton4 "right" 0 67

		       -aoc $timingButton5 "top" 0 $timingButton1
			   -ac $timingButton5 "left" 2 $timingButton4 
			   -ap $timingButton5 "right" 0 84

		       -aoc $timingButton6 "top" 0 $timingButton1
			   -ac $timingButton6 "left" 2 $timingButton5
			   -af $timingButton6 "right" 2

		       -ac $timingDecrButton2 "top" 2 $timingButton1
			   -af $timingDecrButton2 "left" 2
			   -ap $timingDecrButton2 "right" 0 20

		       -aoc $timingDecrButton1 "top" 0 $timingDecrButton2
			   -ac $timingDecrButton1 "left" 2 $timingDecrButton2
			   -ap $timingDecrButton1 "right" 0 40
			   
		       -aoc $timingIncrButton1 "top" 0 $timingDecrButton2
			   -ap $timingIncrButton1 "left" 0 60
			   -ac $timingIncrButton1 "right" 2 $timingIncrButton2
	
		       -aoc $timingIncrButton2 "top" 0 $timingDecrButton2
			   -ap $timingIncrButton2 "left" 0 80
			   -af $timingIncrButton2 "right" 2

			   -aoc $g_cieATBRetimingIncrCBPath "top" 2 $manualRetimingButton
			   -af $g_cieATBRetimingIncrCBPath "left" 2
			   
		       -aoc $g_cieATBRetimingFieldPath "top" 0 $manualRetimingButton
			   -ac $g_cieATBRetimingFieldPath "left" 0 $g_cieATBRetimingIncrCBPath
			   -ac $g_cieATBRetimingFieldPath "right" 5 $manualRetimingButton
			   
			   -ac $manualRetimingButton "top" 4 $timingDecrButton2
			   -af $manualRetimingButton "right" 2 
			   
			   -ac $separator3 "top" 4 $g_cieATBRetimingFieldPath
			   -af $separator3 "left" 0
			   -af $separator3 "right" 0
			   
		       -aoc $g_cieATBRetimingInfoCBPath "top" 2 $timingInfoButton
			   -af $g_cieATBRetimingInfoCBPath "left" 2
	
		       -ac $timingInfoButton "top" 4 $separator3
			   -af $timingInfoButton "right" 2
			   -af $timingInfoButton "bottom" 2
			   
		       -aoc $g_cieATBRetimingInfoTFPath "top" 0 $timingInfoButton
			   -ac $g_cieATBRetimingInfoTFPath "left" 0 $g_cieATBRetimingInfoCBPath
			   -ac $g_cieATBRetimingInfoTFPath "right" 5 $timingInfoButton
		   
			   $retimingForm;


	
	setParent $parentLayout;
	
	// Return the new child of the parent layout
	return $retimingFrame;
}

//*****************************************************************
// Name: cie_atbCreateCameraLayout
// Desc: Creates the Camera UI
//*****************************************************************
global proc string cie_atbCreateCameraLayout( string $parentLayout, string $topAttach )
{
	global string $g_cieATBShotCamNameTFPath;
	global string $g_cieATBShotCamPopupMenuPath;

	string $cameraFrame = `frameLayout -p $parentLayout 
		                               -l "Camera"
								       -borderStyle "etchedIn"
									   -collapsable true
									   -collapse false
								       cameraFrame`;

	formLayout -e
	           -ac $cameraFrame "top" 0 $topAttach
		       -af $cameraFrame "left" 0
		       -af $cameraFrame "right" 0
		       $parentLayout;


	string $cameraForm = `formLayout -p $cameraFrame cameraForm`;
	
	string $separator1 = `separator -style "out"`;
	
	string $swapCamButton = `button -l "Swap Persp/ShotCam"
		                            -ann "Swap between the perspective view and a preset shot camera"
									-c "cie_atbTogglePerspShotCam()"
									swapCamButton`;
	
	string $cameraOptionsFrame = `frameLayout -p $cameraForm
		                                      -l "Camera Options"
											  -borderStyle "etchedOut"
											  -collapsable true
											  -collapse false
											  cameraOptionsFrame`;
	
	string $cameraOptionsForm = `formLayout -p $cameraOptionsFrame cameraOptionsForm`;
	
	string $createShotCamButton = `button -l "Create"
		                                  -ann "Create new camera with the given name"
										  -c "cie_atbCreateShotCam()"
										  createShotCamButton`;
	
	string $g_cieATBShotCamNameTFPath = `textField -cc "" 
		                                           -ann "ShotCam Name"
									               shotCamNameTF`;
	
	$g_cieATBShotCamPopupMenuPath = `popupMenu -p $g_cieATBShotCamNameTFPath 
		                                       -pmc "cie_atbUpdateShotCamMenu()"
										       shotCamPopupMenu`;
	
	// Layout the controls for the camera
	formLayout -e
		       -af $separator1 "top" 0
			   -af $separator1 "left" 0
			   -af $separator1 "right" 0
			   
			   -ac $swapCamButton "top" 2 $separator1
			   -af $swapCamButton "left" 2
			   -af $swapCamButton "right" 2
			   
			   -ac $cameraOptionsFrame "top" 2 $swapCamButton
			   -af $cameraOptionsFrame "left" 0
			   -af $cameraOptionsFrame "right" 0
			   	
		       $cameraForm;

	// Layout the controls for the camera options
	formLayout -e
		       -af $g_cieATBShotCamNameTFPath "top" 0
			   -af $g_cieATBShotCamNameTFPath "left" 2
			   -ap $g_cieATBShotCamNameTFPath "right" 0 49
			   -af $g_cieATBShotCamNameTFPath "bottom" 2
		
		       -af $createShotCamButton "top" 0
			   -ap $createShotCamButton "left" 0 51
			   -af $createShotCamButton "right" 2
			   
			   $cameraOptionsForm;
	
	setParent $parentLayout;

	// Return the new child of the parent layout
	return $cameraFrame;
}

//*****************************************************************
// Name: cie_atbCreateQuickButtonsLayout
// Desc: Creates the Quick Buttons UI
//*****************************************************************
global proc string cie_atbCreateQuickButtonsLayout( string $parentLayout, string $topAttach )
{
	global string $g_cieATBTangentTimelineCB;
	global string $g_cieATBTangentToggleButton;
	
	string $quickButtonsFrame = `frameLayout -p $parentLayout 
		                               -l "Quick Buttons"
								       -borderStyle "etchedIn"
									   -collapsable true
									   -collapse false
								       quickButtonsFrame`;

	formLayout -e
	           -ac $quickButtonsFrame "top" 0 $topAttach
		       -af $quickButtonsFrame "left" 0
		       -af $quickButtonsFrame "right" 0
		       $parentLayout;


	string $quickButtonsForm = `formLayout -p $quickButtonsFrame quickButtonsForm`;
	
	string $separator1 = `separator -style "out"`;
	
	$g_cieATBTangentTimelineCB = `checkBox -l "Range"
		                                   -ann "Tangent changes will only be applied to the selected time slider range"
		                                   -v 0
										   -w 52
										   tangentTimeLineOnlyCB`;	
	
	int $iconSize = 26;
	string $autoTangentButton = `iconTextButton -i1 "autoTangent.xpm"
		                                           -w $iconSize -h $iconSize
												   -c "cie_atbSetTangents( \"auto\" )"
												   -ann "Automatic tangents"
												   autoTanButton`;

	string $splineTangentButton = `iconTextButton -i1 "splineTangent.xpm"
		                                           -w $iconSize -h $iconSize
												   -c "cie_atbSetTangents( \"spline\" )"
												   -ann "Spline tangents"
												   splineTanButton`;
	
	string $clampedTangentButton = `iconTextButton -i1 "clampedTangent.xpm"
		                                           -w $iconSize -h $iconSize
												   -c "cie_atbSetTangents( \"clamped\" )"
												   -ann "Clamped tangents"
												   clampedTanButton`;
	
	string $linearTangentButton = `iconTextButton -i1 "linearTangent.xpm"
		                                           -w $iconSize -h $iconSize
												   -c "cie_atbSetTangents( \"linear\" )"
												   -ann "Linear tangents"
												   linTanButton`;
	
	string $flatTangentButton = `iconTextButton -i1 "flatTangent.xpm"
		                                           -w $iconSize -h $iconSize
												   -c "cie_atbSetTangents( \"flat\" )"
												   -ann "Flat tangents"
												   flatTanButton`;
	
	string $steppedTangentButton = `iconTextButton -i1 "stepTangent.xpm"
		                                           -w $iconSize -h $iconSize
												   -c "cie_atbSetTangents( \"step\" )"
												   -ann "Step tangents"
												   stepTanButton`;
	
	string $plateauTangentButton = `iconTextButton -i1 "plateauTangent.xpm"
		                                           -w $iconSize -h $iconSize
												   -c "cie_atbSetTangents( \"plateau\" )"
												   -ann "Plateau tangents"
												   plateauTanButton`;
	
	// 2012 fix:
	// make sure the icon initially shows the current tangent type
	
	string $currentGlobalTangents[] = `keyTangent -q -g -ott`;
	string $currentGlobalTangent = $currentGlobalTangents[0] + "Tangent.xpm";
	
	$g_cieATBTangentToggleButton = `iconTextButton -w $iconSize
		                                           -h $iconSize
												   -i $currentGlobalTangent
												   -c "cie_atbToggleCurrentTangentImage()"
												   -ann "Toggle modification of the global tangent settings"
												   tangentToggleButton`;
	
	string $tangentSeparator = `separator -horizontal false tangentSeparator`;
	string $tangentSeparator2 = `separator -horizontal false tangentSeparator2`;
	
	string $separator2 = `separator -style "in"`;
	
	string $snapButton = `button -l "Snap"
		                         -ann "Snaps the selected object(s) to the last selected object (translation & rotation)"
								 -c "cie_atbSnapToObject( false );"
								 snapButton`;
	
	string $snapKeyButton = `button -l "Snap Key"
		                            -ann "Snaps the selected object(s) to the last selected object and keys them"
									-c "cie_atbSnapToObject( true );"
									snapKeyButton`;

	string $separator3 = `separator -style "in"`;												  
	
	string $graphEdButton = `button -l "Graph Editor"
		                            -ann "Open/Close the Graph Editor"
									-c "cie_atbToggleGraphEditor()"
									graphEdButton`;

	
	string $dopeSheetButton = `button -l "Dope Sheet"
		                              -ann "Open/Close the Graph Editor"
									  -c "cie_atbToggleDopeSheet()"
									  dopeSheetButton`;							 
	
	string $incrSaveButton = `button -l "Incremental Save"
		                             -ann "Save a new version of the file"
									 -c "cie_atbIncrementalSave()"
									 incrSaveButton`;
	
	string $animblastButton = `button -l "ANIMBlast"
		                              -ann "ANIMBlast the current viewport"
									  -c "cie_atbANIMBlast()"
									  animblastButton`;
									
	
	// Layout the controls
	formLayout -e
		       -af $separator1 "top" 0
			   -af $separator1 "left" 0
			   -af $separator1 "right" 0
			   
			   -ac $g_cieATBTangentTimelineCB "top" 6 $separator1
			   -af $g_cieATBTangentTimelineCB "left" 2
			   
			   -aoc $tangentSeparator "top" 0 $g_cieATBTangentTimelineCB
			   -aoc $tangentSeparator "bottom" 2 $g_cieATBTangentTimelineCB
			   -ac $tangentSeparator "left" 0 $g_cieATBTangentTimelineCB
			   
			   -aoc $autoTangentButton "top" 0 $separator1
			   -ac $autoTangentButton "left" 2 $tangentSeparator
			
			   -aoc $splineTangentButton "top" 0 $autoTangentButton
			   -ac $splineTangentButton "left" 0 $autoTangentButton
			   
			   -aoc $clampedTangentButton "top" 0 $autoTangentButton
			   -ac $clampedTangentButton "left" 0 $splineTangentButton
			   
			   -aoc $linearTangentButton "top" 0 $autoTangentButton
			   -ac $linearTangentButton "left" 0 $clampedTangentButton
			   
			   -aoc $flatTangentButton "top" 0 $autoTangentButton
			   -ac $flatTangentButton "left" 0 $linearTangentButton
			   
			   -aoc $steppedTangentButton "top" 0 $autoTangentButton
			   -ac $steppedTangentButton "left" 0 $flatTangentButton
			   
			   -aoc $plateauTangentButton "top" 0 $autoTangentButton
			   -ac $plateauTangentButton "left" 0 $steppedTangentButton


			   -aoc $tangentSeparator2 "top" 0 $g_cieATBTangentTimelineCB
			   -aoc $tangentSeparator2 "bottom" 2 $g_cieATBTangentTimelineCB
			   -ac $tangentSeparator2 "left" 2 $plateauTangentButton
			   
			   -aoc $g_cieATBTangentToggleButton "top" 0 $splineTangentButton
			   -ac $g_cieATBTangentToggleButton "left" 2 $tangentSeparator2
			   
			   -ac $separator2 "top" 0 $splineTangentButton
			   -af $separator2 "left" 0
			   -af $separator2 "right" 0
			   
			   -ac $snapButton "top" 2 $separator2
			   -af $snapButton "left" 2 
			   -ap $snapButton "right" 2 50
			   
			   -aoc $snapKeyButton "top" 0 $snapButton
			   -ac $snapKeyButton "left" 2 $snapButton
			   -af $snapKeyButton "right" 2
			   
			   -ac $separator3 "top" 1 $snapButton
			   -af $separator3 "left" 0
			   -af $separator3 "right" 0
			   
			   -ac $graphEdButton "top" 1 $separator3
			   -af $graphEdButton "left" 2
			   -ap $graphEdButton "right" 2 50
			   
			   -aoc $dopeSheetButton "top" 0 $graphEdButton
			   -ac $dopeSheetButton "left" 2 $graphEdButton
			   -af $dopeSheetButton "right" 2
			   
			   -ac $incrSaveButton "top" 2 $graphEdButton
			   -af $incrSaveButton "left" 2
			   -af $incrSaveButton "right" 2
			   
			   -ac $animblastButton "top" 2 $incrSaveButton
			   -af $animblastButton "left" 2
			   -af $animblastButton "right" 2
			   -af $animblastButton "bottom" 2
			   
			   $quickButtonsForm;
	
	setParent $parentLayout;
	
	// Return the new child of the parent layout
	return $quickButtonsFrame;
}

//*****************************************************************
// Name: cie_atbCreateShotMaskLayout
// Desc: Creates the ShotMask UI
//*****************************************************************
global proc string cie_atbCreateShotMaskLayout( string $parentLayout, string $topAttach )
{
	global string $g_cieATBShotMaskGateRBG;
	
	global string $g_cieATBShotMaskGeoOnlyCB;
	global string $g_cieATBShotMaskDisplayCB;
	global string $g_cieATBShotMaskAllPlayblastOptionsCB;
	
	global string $g_cieATBShotMaskTitleField;
	global string $g_cieATBShotMaskText1Field;
	global string $g_cieATBShotMaskText2Field;	
	global string $g_cieATBShotMaskRootObjField;
	
	global string $g_cieATBShotMaskDisplaySideEdgesCB;
	global string $g_cieATBShotMaskDisplayFrameCounterCB;
	global string $g_cieATBShotMaskDisplayLtbxCB;
	global string $g_cieATBShotMaskDisplayTextCB;
	global string $g_cieATBShotMaskDisplayTitleBarCB;
	global string $g_cieATBShotMaskDisplaySubTitleBarCB;
	
	global string $g_cieATBShotMaskEdgePercentField;
	global string $g_cieATBShotMaskCounterScaleField;
	global string $g_cieATBShotMaskTitleScaleField;
	global string $g_cieATBShotMaskSubtitleScaleField;
	
	global string $g_cieATBShotMaskUseUniformTranspCB;
	global string $g_cieATBShotMaskBorderColorCSG;
	global string $g_cieATBShotMaskBorderTranspCSG;
	global string $g_cieATBShotMaskTextColorCSG;
	global string $g_cieATBShotMaskTextTranspCSG;
	global string $g_cieATBShotMaskKeyColorCSG;
	global string $g_cieATBShotMaskKeyTranspCSG;
	global string $g_cieATBShotMaskBkDnColorCSG;
	global string $g_cieATBShotMaskBkDnTranspCSG;
	global string $g_cieATBShotMaskLtbxColorCSG;
	global string $g_cieATBShotMaskLtbxTranspCSG;
	
	// Layout for the shot mask
	string $shotMaskFrame = `frameLayout -p $parentLayout 
		                                 -l "Shot Mask"
										 -collapsable true
										 -collapse false
								         -borderStyle "etchedIn"
								         shotMaskFrame`;
	
	string $shotMaskForm = `formLayout -p $shotMaskFrame shotMaskForm`;
	
	// Layout for the Playblast
	string $ANIMBlastFrame = `frameLayout -p $parentLayout
		                                      -l "ANIMBlast"
											  -borderStyle "etchedIn"
											  -collapsable true
											  -collapse false
											  ANIMBlastFrame`;
	
	string $ANIMBlastForm = `formLayout -p ANIMBlastFrame ANIMBlastForm`;
	
	// Main Layout
	formLayout -e
		       -af $shotMaskFrame "top" 0
			   -af $shotMaskFrame "left" 0
			   -af $shotMaskFrame "right" 0
			   
			   -ac $ANIMBlastFrame "top" 0 $shotMaskFrame
			   -af $ANIMBlastFrame "left" 0
			   -af $ANIMBlastFrame "right" 0
			   
			   $parentLayout;

	// Layout for the Appearance Options dropdown
	string $shotMaskAppearanceFrame = `frameLayout -p $shotMaskForm
		                                           -l "Display"
											       -borderStyle "etchedIn"
											       -collapsable true
											       -collapse false
												   -labelIndent 2
											       shotMaskAppearanceFrame`;
	
	string $shotMaskAppearanceForm = `formLayout -p $shotMaskAppearanceFrame shotMaskAppearanceForm`;
	
	string $shotMaskAppearanceVisibilityFrame = `frameLayout -p $shotMaskAppearanceForm
		                                                  -l "Visibility"
														  -borderStyle "etchedIn"
														  -collapsable true
														  -collapse true
														  -labelIndent 4
														  shotMaskAppearanceVisibilityFrame`;
	
	string $shotMaskAppearanceVisibilityForm = `formLayout -p $shotMaskAppearanceVisibilityFrame shotMaskAppearanceVisibilityForm`;
	
	string $shotMaskAppearanceColorFrame = `frameLayout -p $shotMaskAppearanceForm
		                                                -l "Color/Transparency"
														-borderStyle "etchedIn"
														-collapsable true
														-collapse true
														-labelIndent 4
														shotMaskAppearanceColorFrame`;
	
	string $shotMaskAppearanceColorForm = `formLayout -p $shotMaskAppearanceColorFrame shotMaskAppearanceColorForm`;
	
	setParent $shotMaskForm;
	
	// Controls for the Shot Mask
	string $separator1 = `separator -style "out"`;
	
	$g_cieATBShotMaskGateRBG = `radioButtonGrp -sl 1
		                                       -nrb 2
		                                       -la2 "Resolution Gate" "Film Gate"
		                                       -ann "The gate used for shot mask creation"
											   shotMaskUseFilmGate`;
	 
	 
	string $createShotMaskButton = `button -l "Create"
		                                   -ann "Create the tradigiTOOLS Shot Mask"
									       -c "cie_atbShotMask(); cie_atbRestoreWindowFocus();"
									       createShotMaskButton`;
	
	string $deleteShotMaskButton = `button -l "Delete"
		                                   -ann "Delete the tradigiTOOLS Shot Mask"
									       -c "cieShotMask -cs; cie_atbRestoreWindowFocus();"
									       deleteShotMaskButton`;
	
	string $deleteAllShotMaskButton = `button -l "Delete All"
		                                      -ann "Deletes the tradigiTOOLS Shot Mask and Shot Mask details"
											  -c "cie_atbShotMaskDeleteLocator; cieShotMask -cs; cie_atbRestoreWindowFocus();"
											  deleteAllShotMaskButton`;

	
	// Layout for the main shot mask
	formLayout -e
		
			   -af $separator1 "top" 0
			   -af $separator1 "left" 0
			   -af $separator1 "right" 0
			   
			   -ac $g_cieATBShotMaskGateRBG "top" 2 $separator1
			   -af $g_cieATBShotMaskGateRBG "left" 2
			   
			   -ac $createShotMaskButton "top" 2 $g_cieATBShotMaskGateRBG
			   -af $createShotMaskButton "left" 2
			   -ap $createShotMaskButton "right" 1 33
			   
			   -aoc $deleteShotMaskButton "top" 0 $createShotMaskButton
			   -ac $deleteShotMaskButton "left" 1 $createShotMaskButton
			   -ap $deleteShotMaskButton "right" 2 66
			   
			   -aoc $deleteAllShotMaskButton "top" 0 $createShotMaskButton
			   -ac $deleteAllShotMaskButton "left" 1 $deleteShotMaskButton
			   -af $deleteAllShotMaskButton "right" 2
		   		   
			   -ac $shotMaskAppearanceFrame "top" 2 $deleteShotMaskButton
			   -af $shotMaskAppearanceFrame "left" 0
			   -af $shotMaskAppearanceFrame "right" 0
			   
		       $shotMaskForm;
	
	// Controls for ANIMBlast
	setParent $ANIMBlastForm;

	string $separatorAB = `separator -style "out"`;
	
	$g_cieATBShotMaskGeoOnlyCB = `checkBox -l "Hide Non-Geometric Objects"
		                                   -ann "ANIMBlast will only display NURBS surfaces, Polygons, and SubDs"
										   -v 1
										   geoOnlyCB`;
	
	$g_cieATBShotMaskDisplayCB = `checkBox -l "Display Shot Mask"
		                                          -ann "Displays the shot mask when ANIMBlasting"
												  -v 0
												  dispayShotMaskCB`;
	
	$g_cieATBShotMaskAllPlayblastOptionsCB = `checkBox -l "Use All Playblast Options"
		                                               -ann "ANIMBlast will use all of the playblast options"
													   -v 0
													   allPlayblastOptionsCB`;
	
	string $playblastButton = `button -l "ANIMBlast"
		                              -ann "Preview animation by capturing frames"
									  -c "cie_atbANIMBlast()"
									  playblastButton`;
	
	// Layout for ANIMBlast
	formLayout -e
		       
			   -af $separatorAB "top" 0
			   -af $separatorAB "left" 0
			   -af $separatorAB "right" 0
		
		       -ac $g_cieATBShotMaskGeoOnlyCB "top" 2 $separatorAB
			   -af $g_cieATBShotMaskGeoOnlyCB "left" 2
			   
			   -ac $g_cieATBShotMaskDisplayCB "top" 2 $g_cieATBShotMaskGeoOnlyCB
			   -af $g_cieATBShotMaskDisplayCB "left" 2
			   
			   -ac $g_cieATBShotMaskAllPlayblastOptionsCB "top" 2 $g_cieATBShotMaskDisplayCB
			   -af $g_cieATBShotMaskAllPlayblastOptionsCB "left" 2
			   
			   -ac $playblastButton "top" 2 $g_cieATBShotMaskAllPlayblastOptionsCB
			   -af $playblastButton "left" 2
			   -af $playblastButton "right" 2
			   -af $playblastButton "bottom" 2
			   
			   $ANIMBlastForm;


	// Controls for the General Appearance Options
	setParent $shotMaskAppearanceForm;

	string $sceneName = cie_atbGetSceneName();
	$g_cieATBShotMaskTitleField = `textFieldGrp -l "Title" 
		                                        -cw2 60 100
											    -ad2 2
		                                        -cc ""
												-ann "The text displayed at the top of the shot mask"
												-tx $sceneName
											    shotMaskTitleField`;
	
	$g_cieATBShotMaskText1Field = `textFieldGrp -l "Seq/Shot" 
		                                        -cw2 60 100
											    -ad2 2
		                                        -cc ""
												-ann "The text displayed in the lower left of the shot mask"
												-tx "Sequence/Shot Name"
											    shotMaskText1Field`;
	
	 $g_cieATBShotMaskText2Field = `textFieldGrp -l "Animator" 
		                                         -cw2 60 100
											     -ad2 2
		                                         -cc ""
												 -ann "The text displayed in the lower right of the shot mask"
												 -tx "Animator's Name"
											     shotMaskText2Field`;
	 
	 string $separatorApp1 = `separator -style "in"`;
	 
	 $g_cieATBShotMaskRootObjField = `textFieldGrp -l "Root Obj" 
		                                           -cw2 60 100
												   -ad2 2
		                                           -cc "cie_atbShotMaskUpdateRootObj()"
												   -ann "The object(s) queried for keyframe information"
											       shotMaskRootObjField`;
	 
	 string $currentSelectedButton = `button -l "Selected"
		                                     -ann "Assigns the currently selected objects"
										     -w 70
										     -c "cie_atbShotMaskGetRootObj()"
										     currentSelectedButton`;
	 
	 string $separatorApp2 = `separator -style "in"`;
	
	$g_cieATBShotMaskEdgePercentField = `intFieldGrp -l "Edge Thickness"
		                                             -ann "Controls the thickness of the shot mask (0.05 - 0.10)"
												     -v1 5
													 -cw2 94 50
												     -cc ""
												     edgePercentField`;
	
	string $edgeThicknessRebuildButton = `button -l "Rebuild"
		                                         -ann "Rebuild the shot mask with the new edge value"
												 -c "cie_atbShotMaskUpdateEdgeThickness()"
												 edgeThicknessRebuildButton`;
		
	$g_cieATBShotMaskTitleScaleField = `floatFieldGrp -l "Title Scale"
		                                                -ann "Adjusts the scaling of the title text"
														-nf 2
														-cw3 94 50 50
														-v1 1.0 -v2 1.0
														-pre 2
														-cc "cie_atbShotMaskUpdateTitleScale()"
														titleScaleFFG`;
	
	$g_cieATBShotMaskSubtitleScaleField = `floatFieldGrp -l "Subtitle Scale"
		                                                -ann "Adjusts the scaling of the subtitle text"
														-nf 2
														-cw3 94 50 50
														-v1 1.0 -v2 1.0
														-pre 2
														-cc "cie_atbShotMaskUpdateSubTitleScale()"
														subtitleScaleFFG`;
	
	$g_cieATBShotMaskCounterScaleField = `floatFieldGrp -l "Counter Scale"
		                                                -ann "Adjusts the scaling on the frame counter"
														-nf 2
														-cw3 94 50 50
														-v1 1.0 -v2 1.0
														-pre 2
														-cc "cie_atbShotMaskUpdateCounterScale()"
														counterScaleFFG`;
														
	
	// Controls for the Visibility Options
	setParent $shotMaskAppearanceVisibilityForm;
	
	
	$g_cieATBShotMaskDisplayTextCB = `checkBox -l "Text"
		                                       -ann "Controls the visibility of the text"
											   -v 1
											   -cc "cie_atbShotMaskUpdateTextVis()"
											   displayTextCB`;
	
	$g_cieATBShotMaskDisplayFrameCounterCB = `checkBox -l "Counter"
		                                            -ann "Controls the visibility of the Frame Counter"
													-v 1
													-cc "cie_atbShotMaskUpdateFrameCounterVis()"
													displayFrameCounterCB`;
	
	$g_cieATBShotMaskDisplayTitleBarCB = `checkBox -l "Title Bar"
		                                           -ann "Controls the visibility of the title bar"
											       -v 1
											       -cc "cie_atbShotMaskUpdateTitleBarVis()"
											       displayTitleCB`;
	
	$g_cieATBShotMaskDisplaySubTitleBarCB = `checkBox -l "Seq/Shot Bar"
		                                              -ann "Controls the visibility of the Seq/Shot bar"
											          -v 1
											          -cc "cie_atbShotMaskUpdateSubTitleBarVis()"
											          displaySubTitleCB`;
	
	$g_cieATBShotMaskDisplaySideEdgesCB = `checkBox -l "Side Bars"
		                                         -ann "Controls the visibility of the side edges of the mask"
												 -v 0
												 -cc "cie_atbShotMaskUpdateSidebarVis()"
												 displaySideEdgesCB`;
	
	$g_cieATBShotMaskDisplayLtbxCB = `checkBox -l "Letterbox"
		                                       -ann "Controls the visibility of the Frame Counter"
											   -v 1
										       -cc "cie_atbShotMaskUpdateLtbxVis()"
											   displayLtbxCB`;
	

	
	// Controls for the Color Appearance Options
	setParent $shotMaskAppearanceColorForm;
	
	string $separator1_4 = `separator -style "in"`;
	
	$g_cieATBShotMaskUseUniformTranspCB = `checkBox -l "Uniform Transparency"
		                                            -ann "All transparencies will be controlled through the Mask Transparency control"
													-v 0
													-cc "cie_atbShotMaskUpdateTransparency()"
													uniformTransCB`;
	
	$g_cieATBShotMaskBorderColorCSG = `colorSliderGrp -l "Mask Color"
		                                              -cw3 80 40 80
													  -ad3 3
											          -cc "cie_atbShotMaskUpdateBorderColor()"
													  -dc "cie_atbShotMaskUpdateBorderColor()"
													  -rgb 0.0 0.0 0.0
		                                              borderColorCSG`;
	
	$g_cieATBShotMaskBorderTranspCSG = `colorSliderGrp -l "Mask Transp."
		                                               -cw3 80 40 80
													   -ad3 3
											           -cc "cie_atbShotMaskUpdateBorderTransp()"
													   -dc "cie_atbShotMaskUpdateBorderTransp()"
													   -rgb 0.7 0.7 0.7
		                                               borderTranspCSG`;

	
	$g_cieATBShotMaskTextColorCSG = `colorSliderGrp -l "Text Color"
		                                              -cw3 80 40 80
													  -ad3 3
											          -cc "cie_atbShotMaskUpdateTextColor()"
													  -dc "cie_atbShotMaskUpdateTextColor()"
													  -rgb 1.0 1.0 1.0
		                                              textColorCSG`;

	$g_cieATBShotMaskTextTranspCSG = `colorSliderGrp -l "Text Transp."
		                                               -cw3 80 40 80
													   -ad3 3
											           -cc "cie_atbShotMaskUpdateTextTransp()"
													   -dc "cie_atbShotMaskUpdateTextTransp()"
													   -rgb 0.0 0.0 0.0
		                                               textTranspCSG`;
	
	$g_cieATBShotMaskKeyColorCSG = `colorSliderGrp -l "Key Color"
		                                              -cw3 80 40 80
													  -ad3 3
											          -cc "cie_atbShotMaskUpdateKeyColor()"
													  -dc "cie_atbShotMaskUpdateKeyColor()"
													  -rgb 0.8 0.0 0.0
		                                              keyColorCSG`;
	
	$g_cieATBShotMaskKeyTranspCSG = `colorSliderGrp -l "Key Transp."
		                                               -cw3 80 40 80
													   -ad3 3
											           -cc "cie_atbShotMaskUpdateKeyTransp()"
													   -dc "cie_atbShotMaskUpdateKeyTransp()"
													   -rgb 0.5 0.5 0.5
		                                               keyTranspCSG`;
	
	$g_cieATBShotMaskBkDnColorCSG = `colorSliderGrp -l "BkDn Color"
		                                            -cw3 80 40 80
													-ad3 3
											        -cc "cie_atbShotMaskUpdateBkDnColor()"
													-dc "cie_atbShotMaskUpdateBkDnColor()"
													-rgb 0.0 0.8 0.0
		                                            bkDnColorCSG`;
	
	$g_cieATBShotMaskBkDnTranspCSG = `colorSliderGrp -l "BkDn Transp."
		                                               -cw3 80 40 80
													   -ad3 3
											           -cc "cie_atbShotMaskUpdateBkDnTransp()"
													   -dc "cie_atbShotMaskUpdateBkDnTransp()"
													   -rgb 0.5 0.5 0.5
		                                               bkDnTranspCSG`;
	
	$g_cieATBShotMaskLtbxColorCSG = `colorSliderGrp -l "Ltbx Color"
		                                            -cw3 80 40 80
													-ad3 3
											        -cc "cie_atbShotMaskUpdateLtbxColor()"
													-dc "cie_atbShotMaskUpdateLtbxColor()"
													-rgb 0.0 0.0 0.0
		                                            ltbxColorCSG`;
	
	$g_cieATBShotMaskLtbxTranspCSG = `colorSliderGrp -l "Ltbx Transp."
		                                               -cw3 80 40 80
													   -ad3 3
											           -cc "cie_atbShotMaskUpdateLtbxTransp()"
													   -dc "cie_atbShotMaskUpdateLtbxTransp()"
													   -rgb 0.0 0.0 0.0
		                                               ltbxTranspCSG`;
	
	// Layout for the Appearance Options
	formLayout -e
		       
			   -af $g_cieATBShotMaskTitleField "top" 2
			   -af $g_cieATBShotMaskTitleField "left" 2 
			   -af $g_cieATBShotMaskTitleField "right" 10
			   		   
			   -ac $g_cieATBShotMaskText1Field "top" 0 $g_cieATBShotMaskTitleField
			   -aoc $g_cieATBShotMaskText1Field "left" 0 $g_cieATBShotMaskTitleField
			   -aoc $g_cieATBShotMaskText1Field "right" 0 $g_cieATBShotMaskTitleField
			   
			   -ac $g_cieATBShotMaskText2Field "top" 0 $g_cieATBShotMaskText1Field
			   -aoc $g_cieATBShotMaskText2Field "left" 0 $g_cieATBShotMaskTitleField
			   -aoc $g_cieATBShotMaskText2Field "right" 0 $g_cieATBShotMaskTitleField
			   
			   -ac $separatorApp1 "top" 1 $g_cieATBShotMaskText2Field
			   -af $separatorApp1 "left" 0
			   -af $separatorApp1 "right" 0
			   
			   -ac $g_cieATBShotMaskRootObjField "top" 1 $separatorApp1
			   -af $g_cieATBShotMaskRootObjField "left" 2
			   -ac $g_cieATBShotMaskRootObjField "right" 2 $currentSelectedButton
			   
			   -ac $currentSelectedButton "top" 1 $separatorApp1
			   -aoc $currentSelectedButton "right" 0 $g_cieATBShotMaskTitleField
			   
			   -ac $separatorApp2 "top" 1 $g_cieATBShotMaskRootObjField
			   -af $separatorApp2 "left" 0
			   -af $separatorApp2 "right" 0
		
			   -ac $g_cieATBShotMaskEdgePercentField "top" 1 $separatorApp2
			   -af $g_cieATBShotMaskEdgePercentField "left" 2
			   
			   -aoc $edgeThicknessRebuildButton "top" 0 $g_cieATBShotMaskEdgePercentField
			   -ac $edgeThicknessRebuildButton "left" 2 $g_cieATBShotMaskEdgePercentField
			   -aoc $edgeThicknessRebuildButton "right" 0 $g_cieATBShotMaskTitleField
			   
			   -ac $g_cieATBShotMaskTitleScaleField "top" 2 $g_cieATBShotMaskEdgePercentField
			   -af $g_cieATBShotMaskTitleScaleField "left" 2 
			   -aoc $g_cieATBShotMaskTitleScaleField "right" 0 $g_cieATBShotMaskTitleField
			   
			   -ac $g_cieATBShotMaskSubtitleScaleField "top" 2 $g_cieATBShotMaskTitleScaleField
			   -af $g_cieATBShotMaskSubtitleScaleField "left" 2 
			   -aoc $g_cieATBShotMaskSubtitleScaleField "right" 0 $g_cieATBShotMaskTitleField
			   
			   -ac $g_cieATBShotMaskCounterScaleField "top" 2 $g_cieATBShotMaskSubtitleScaleField
			   -af $g_cieATBShotMaskCounterScaleField "left" 2 
			   -aoc $g_cieATBShotMaskCounterScaleField "right" 0 $g_cieATBShotMaskTitleField
			   
			   -ac $shotMaskAppearanceVisibilityFrame "top" 2 $g_cieATBShotMaskCounterScaleField
			   -af $shotMaskAppearanceVisibilityFrame "left" 0
			   -af $shotMaskAppearanceVisibilityFrame "right" 0
			   
			   -ac $shotMaskAppearanceColorFrame "top" 0 $shotMaskAppearanceVisibilityFrame
			   -af $shotMaskAppearanceColorFrame "left" 0
			   -af $shotMaskAppearanceColorFrame "right" 0
			   
			   $shotMaskAppearanceForm;

	
	// Layout for the Visibility Options
	formLayout -e		   
		
		       -af $g_cieATBShotMaskDisplayTextCB "top" 2
			   -ap $g_cieATBShotMaskDisplayTextCB "left" 0 14

			   -aoc $g_cieATBShotMaskDisplayFrameCounterCB "top" 0 $g_cieATBShotMaskDisplayTextCB
			   -ap  $g_cieATBShotMaskDisplayFrameCounterCB "left" 0 56
			   
			   -ac $g_cieATBShotMaskDisplayTitleBarCB "top" 2 $g_cieATBShotMaskDisplayTextCB
			   -aoc $g_cieATBShotMaskDisplayTitleBarCB "left" 0 $g_cieATBShotMaskDisplayTextCB
			   
			   -aoc $g_cieATBShotMaskDisplaySubTitleBarCB "top" 0 $g_cieATBShotMaskDisplayTitleBarCB
			   -aoc $g_cieATBShotMaskDisplaySubTitleBarCB "left" 0 $g_cieATBShotMaskDisplayFrameCounterCB
			   			   
			   -ac $g_cieATBShotMaskDisplaySideEdgesCB "top" 2 $g_cieATBShotMaskDisplayTitleBarCB
			   -aoc $g_cieATBShotMaskDisplaySideEdgesCB "left" 0 $g_cieATBShotMaskDisplayTextCB
			   -af $g_cieATBShotMaskDisplaySideEdgesCB "bottom" 2
			   
			   -aoc $g_cieATBShotMaskDisplayLtbxCB "top" 0 $g_cieATBShotMaskDisplaySideEdgesCB
			   -aoc $g_cieATBShotMaskDisplayLtbxCB "left" 0 $g_cieATBShotMaskDisplayFrameCounterCB
		
		       $shotMaskAppearanceVisibilityForm;
	
	
	// Layout for the Color/Transparency Options
	formLayout -e
		       -af $g_cieATBShotMaskUseUniformTranspCB "top" 2 
			   -af $g_cieATBShotMaskUseUniformTranspCB "left" 80
			   			
			   -ac $g_cieATBShotMaskBorderColorCSG "top" 2 $g_cieATBShotMaskUseUniformTranspCB
			   -af $g_cieATBShotMaskBorderColorCSG "left" 2
			   -af $g_cieATBShotMaskBorderColorCSG "right" 10
		   
			   -ac $g_cieATBShotMaskBorderTranspCSG "top" 2 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskBorderTranspCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskBorderTranspCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $g_cieATBShotMaskTextColorCSG "top" 2 $g_cieATBShotMaskBorderTranspCSG
			   -aoc $g_cieATBShotMaskTextColorCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskTextColorCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $g_cieATBShotMaskTextTranspCSG "top" 2 $g_cieATBShotMaskTextColorCSG
			   -aoc $g_cieATBShotMaskTextTranspCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskTextTranspCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $g_cieATBShotMaskKeyColorCSG "top" 2 $g_cieATBShotMaskTextTranspCSG
			   -aoc $g_cieATBShotMaskKeyColorCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskKeyColorCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $g_cieATBShotMaskKeyTranspCSG "top" 2 $g_cieATBShotMaskKeyColorCSG
			   -aoc $g_cieATBShotMaskKeyTranspCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskKeyTranspCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $g_cieATBShotMaskBkDnColorCSG "top" 2 $g_cieATBShotMaskKeyTranspCSG
			   -aoc $g_cieATBShotMaskBkDnColorCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskBkDnColorCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $g_cieATBShotMaskBkDnTranspCSG "top" 2 $g_cieATBShotMaskBkDnColorCSG
			   -aoc $g_cieATBShotMaskBkDnTranspCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskBkDnTranspCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $separator1_4 "top" 2 $g_cieATBShotMaskBkDnTranspCSG
			   -af $separator1_4 "left" 0
			   -af $separator1_4 "right" 0
			   
			   -ac $g_cieATBShotMaskLtbxColorCSG "top" 2 $separator1_4
			   -aoc $g_cieATBShotMaskLtbxColorCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskLtbxColorCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   
			   -ac $g_cieATBShotMaskLtbxTranspCSG "top" 2 $g_cieATBShotMaskLtbxColorCSG
			   -aoc $g_cieATBShotMaskLtbxTranspCSG "left" 0 $g_cieATBShotMaskBorderColorCSG
			   -aoc $g_cieATBShotMaskLtbxTranspCSG "right" 0 $g_cieATBShotMaskBorderColorCSG
			   -af $g_cieATBShotMaskLtbxTranspCSG "bottom" 2
			
			   $shotMaskAppearanceColorForm;
	
	setParent $parentLayout;
	
	return $shotMaskFrame;
}

//*****************************************************************
// Name: cie_atbCreateCurveCleanerLayout
// Desc: Creates the Curve Cleaner UI
//*****************************************************************
global proc string cie_atbCreateCurveCleanerLayout( string $parentLayout, string $topAttach )
{	
	global string $g_cieATBCrvCleanerStartEndCB;
	global string $g_cieATBCrvCleanerFactorFSG;
	global string $g_cieATBCrvCleanerSoftnessFSG;
	global string $g_cieATBCrvCleanerSoftenAllCB;
	
	// Main Layout for the shot mask UI
	string $curveCleanerFrame = `frameLayout -p $parentLayout 
		                                     -l "Curve Cleaner"
								             -borderStyle "etchedIn"
											 -collapsable true
											 -collapse false
								             curveCleanerFrame`;
	// The main form
	formLayout -e
		       -af $curveCleanerFrame "top" 0
			   -af $curveCleanerFrame "left" 0
			   -af $curveCleanerFrame "right" 0
			   $parentLayout;
	
	// The curve cleaner form (holds submenu frames)
	string $curveCleanerForm = `formLayout -p $curveCleanerFrame curveCleanerForm`;
	
	// The redundant key sub frame
	string $redundantKeysFrame = `frameLayout -p $curveCleanerForm
		                                      -l "Keys"
											  -borderStyle "etchedIn"
											  -collapsable true
											  -collapse true
											  redundantKeysFrame`;
	
	// The clean tangents sub frame
	string $cleanTangentsFrame = `frameLayout -p $curveCleanerForm
		                                      -l "Tangents"
											  -borderStyle "etchedIn"
											  -collapsable true
											  -collapse false
											  cleanTangentsFrame`;
	// Curve Cleaner Layout
	formLayout -e
		       
		       -af $redundantKeysFrame "top" 2
			   -af $redundantKeysFrame "left" 0
			   -af $redundantKeysFrame "right" 0
			   
			   -ac $cleanTangentsFrame "top" 0 $redundantKeysFrame
			   -af $cleanTangentsFrame "left" 0
			   -af $cleanTangentsFrame "right" 0
			   
			   $curveCleanerForm;
	
	// Forms to attach submenu controls to
	string $redundantKeysForm = `formLayout -p $redundantKeysFrame redundantKeysForm`;
	string $cleanTangentsForm = `formLayout -p $cleanTangentsFrame  cleanTangentsForm`;

	// Create the redundant key controls
	setParent $redundantKeysForm;
	
	string $removeRedundantButton = `button -l "Remove Redundant Keys"
		                                    -ann "Removes all keys that don't affect the shape of the anim curve on the selected objects"
		                                    -c "cieCleanCurves -rrk; cie_atbRestoreWindowFocus()"
											removeRedundantButton`;
	
	formLayout -e
		
			   -af $removeRedundantButton "top" 2
			   -af $removeRedundantButton "left" 2
			   -af $removeRedundantButton "right" 2
			   
			   $redundantKeysForm;
	
	
	// Create the clean tangent controls
	setParent $cleanTangentsForm;
		
	string $cleanTangentsButton = `button -l "Clean Tangents"
		                                    -ann "Flattens the tangents on peak/valley keys and splines the remaining keys" 
		                                    -c "cie_atbCleanTangents()"
											cleanTangentsButton`;
	
	$g_cieATBCrvCleanerStartEndCB = `checkBox -l "Spline Start/End Keys"
		                                      -ann "Sets the tangents of the start and end keys to spline, otherwise flat"
		                                      -v 1
											  startEndCB`;
	
	$g_cieATBCrvCleanerSoftenAllCB = `checkBox -l "Soften All Splines"
		                                       -ann "Softness will affect all spline tangents, not just those immediately before or after a peak or valley"
		                                       -v 1
											   smoothAllSplinesCB`;
	
	$g_cieATBCrvCleanerSoftnessFSG = `floatSliderGrp -l "Softness"
		                                             -ann "The favoring to in/out-tangent angles.  0.0 favors the smallest angle, 0.5 equally favors each and 1.0 favors the largest angle."
		                                             -f true
		                                             -pre 3
													 -v 0.0
													 -minValue 0.0
													 -maxValue 1.0
													 -cw3 82 50 100
													 -ad3 3
													 crvCleanerSmoothness`;
	
	$g_cieATBCrvCleanerFactorFSG = `floatSliderGrp -l "Weight Factor"
		                                           -ann "The weighting factor applied to a tangent with an unlocked weight"
		                                           -f true
		                                           -pre 3
		                                           -v 0.333
												   -minValue 0.1
												   -maxValue 1.0
												   -cw3 82 50 100
												   -ad3 3
												   crvCleanerWeightFactor`;
	// Tangents Layout
	formLayout -e
		
			   -af $g_cieATBCrvCleanerStartEndCB "top" 2
			   -af $g_cieATBCrvCleanerStartEndCB "left" 83
			   
			   -ac $g_cieATBCrvCleanerSoftenAllCB "top" 2 $g_cieATBCrvCleanerStartEndCB
			   -af $g_cieATBCrvCleanerSoftenAllCB "left" 83
			   
			   -ac $g_cieATBCrvCleanerSoftnessFSG "top" 2 $g_cieATBCrvCleanerSoftenAllCB
			   -af $g_cieATBCrvCleanerSoftnessFSG "left" 2
			   -af $g_cieATBCrvCleanerSoftnessFSG "right" 10
			   
			   -ac $g_cieATBCrvCleanerFactorFSG "top" 0 $g_cieATBCrvCleanerSoftnessFSG
			   -af $g_cieATBCrvCleanerFactorFSG "left" 2
			   -af $g_cieATBCrvCleanerFactorFSG "right" 10
			   
			   -ac $cleanTangentsButton "top" 2 $g_cieATBCrvCleanerFactorFSG
			   -af $cleanTangentsButton "left" 2 
			   -af $cleanTangentsButton "right" 2
			   -af $cleanTangentsButton "bottom" 2
			   
			   $cleanTangentsForm;
	
	setParent $parentLayout;
	
	return $curveCleanerFrame;
}

//*****************************************************************
// Name: cie_atbSetBreakdown
// Desc: Sets a new key/breakdown for the currently
//       selected objects based on the UI values
//*****************************************************************
global proc cie_atbSetBreakdown( float $weight )
{
	global int $g_cieATBIgnoreRippleCheckFlag;
	global int $g_cieATBKeySelectedAttrFlag;
	global string $g_cieATBInvalidBreakdownAttr;
	global string $g_cieATBBreakdownMode;
	global int $g_cieATBTickDrawSpecialFlag;
	
	global string $g_cieATBBreakdownSliderPath;
	global string $g_cieATBBreakdownFieldPath;
	
	float $breakdownWeight = 0.5;
	
	// When weight == -1, get value from the slider
	// When weight == -2, get value from the field
	if( $weight == -1.0 ) {
		$breakdownWeight = cie_atbBreakdownWeightFromSlider();
	}
	else if( $weight == -2.0 ) {
		$breakdownWeight = cie_atbBreakdownWeightFromField();
	}
	else {
		$breakdownWeight = $weight;
	
		int $intWeight = ($weight * 200) - 100;
		intField -e -v $intWeight $g_cieATBBreakdownFieldPath;
		intSlider -e -v $intWeight $g_cieATBBreakdownSliderPath;
	}
	
	// Insert the breakdown
	cieInsertBreakdown -w   $breakdownWeight 
		               -m   $g_cieATBBreakdownMode
					   -sa  $g_cieATBKeySelectedAttrFlag
					   -tds $g_cieATBTickDrawSpecialFlag
					   -iao $g_cieATBInvalidBreakdownAttr
					   -irc $g_cieATBIgnoreRippleCheckFlag;
	
	cie_atbRestoreWindowFocus();
}

//*****************************************************************
// Name: cie_atbBreakdownWeightFromSlider
// Desc: Converts the slider value from an integer with the
//       range of -100 to 100 to a float value in the range
//       of 0.0 to 1.0;
//*****************************************************************
global proc float cie_atbBreakdownWeightFromSlider()
{
	global string $g_cieATBBreakdownSliderPath;
	global string $g_cieATBBreakdownFieldPath;
	
	float $weight = `intSlider -q -v $g_cieATBBreakdownSliderPath`;
	
	// Update the weight field with the slider value
	intField -e -v $weight $g_cieATBBreakdownFieldPath;
	
	return (($weight + 100.0) / 200.0);	
}

//*****************************************************************
// Name: cie_atbBreakdownWeightFromField
// Desc: Converts the field value from an integer with the
//       range of -100 to 100 to a float value in the range
//       of 0.0 to 1.0;
//*****************************************************************
global proc float cie_atbBreakdownWeightFromField()
{
	global string $g_cieATBBreakdownSliderPath;
	global string $g_cieATBBreakdownFieldPath;
	
	float $weight = `intField -q -v $g_cieATBBreakdownFieldPath`;
	
	// Update the weight slider with the field value
	intSlider -e -v $weight $g_cieATBBreakdownSliderPath;
	
	// Convert the integer value to a float value
	return (($weight + 100.0) / 200.0);			
}

//*****************************************************************
// Name: cie_atbUpdateBreakdownFieldFromSlider
// Desc: Keeps the value displayed in the breakdown field
//       in sync with the slider
//*****************************************************************
global proc cie_atbUpdateBreakdownFieldFromSlider()
{
	global string $g_cieATBBreakdownSliderPath;
	global string $g_cieATBBreakdownFieldPath;
	
	float $weight = `intSlider -q -v $g_cieATBBreakdownSliderPath`;
	intSlider -e -v $weight $g_cieATBBreakdownSliderPath;
}

//*****************************************************************
// Name: cie_atbIgnoreRippleCheckToggle
// Desc: Toggles the ripple check flag
//*****************************************************************
global proc cie_atbIgnoreRippleCheckToggle()
{
	global int $g_cieATBIgnoreRippleCheckFlag;
	$g_cieATBIgnoreRippleCheckFlag = !$g_cieATBIgnoreRippleCheckFlag;
}

//*****************************************************************
// Name: cie_atbSetKeyframe
// Desc: Sets a new Keyframe/Breakdown at the current time
//*****************************************************************
global proc cie_atbSetKeyframe( int $setTickDrawSpecial )
{
	global string $g_cieATBSetKeyRBGPath;
	
	// Check the RBG for the ignoreUnkeyed flag
	int $ignoreUnkeyed = false;
	if( `radioButtonGrp -q -sl $g_cieATBSetKeyRBGPath` == 2 )
		$ignoreUnkeyed = true;
	
	cieSetKeyframe -tds $setTickDrawSpecial -iuk $ignoreUnkeyed;
	
	restoreLastPanelWithFocus();
}

//*****************************************************************
// Name: cie_atbRetime
// Desc: Performs the retiming operation based on the
//       input parameters
//*****************************************************************
global proc cie_atbRetime( int $isIncremental, int $delta )
{
	global string $g_cieATBRetimingNextKeyPath;
	
	int $moveToNext = `checkBox -q -v $g_cieATBRetimingNextKeyPath`;
	
	// Do the retiming
	cieRetiming -rel $isIncremental -d $delta -nkc $moveToNext;
	
	restoreLastPanelWithFocus();
}

//*****************************************************************
// Name: cie_atbRetimeByField
// Desc: Performs the retiming operation based on the value
//       in the retiming field and the abs/rel radio buttons
//*****************************************************************
global proc cie_atbRetimeByField()
{
	global string $g_cieATBRetimingFieldPath;
	global string $g_cieATBRetimingIncrCBPath;
	
	int $isIncremental = `checkBox -q -v $g_cieATBRetimingIncrCBPath`;
	int $retimingValue = `intField -q -v $g_cieATBRetimingFieldPath`;
	
	cie_atbRetime( $isIncremental, $retimingValue );

}

//*****************************************************************
// Name: cie_updateRetimingInfo
// Desc: Updates the retiming info box
//*****************************************************************
global proc cie_atbUpdateRetimingInfo()
{
	global string $g_cieATBRetimingInfoTFPath;
	
	string $info = `cieRetiming -q -delta`;
	
	textField -e -tx $info $g_cieATBRetimingInfoTFPath;
}

//*****************************************************************
// Name: cie_atbCreateShotCam
// Desc: Creates a new shot camera
//*****************************************************************
global proc cie_atbCreateShotCam()
{
	global string $g_cieATBShotCamNameTFPath;
	
	string $shotCamName;	
	string $tempCam[];
	
	$shotCamName = `textField -q -tx $g_cieATBShotCamNameTFPath`;
	
	// If no name is given use the default name
	if ($shotCamName == "")
		$shotCamName = "ShotCam";
	
	// Attempt to create a new camera and give it the new name
	if (objExists($shotCamName))
		warning("Error: " + $shotCamName + " already exists.");
	else {
		$tempCam = `camera`;
		rename $tempCam[0] $shotCamName;
	}	
	
	textField -e -tx $shotCamName $g_cieATBShotCamNameTFPath;
	
	cie_atbRestoreWindowFocus();
}

//*****************************************************************
// Name: cie_atbTogglePerspShotCam
// Desc: Toggles between the perspective view and the
//       ShotCam w/name displayed in the text field
//*****************************************************************
global proc cie_atbTogglePerspShotCam()
{
	global string $g_cieATBShotCamNameTFPath;
	
	string $shotCamName;
	string $lastPanelWithFocus;

	$shotCamName = `textField -q -tx $g_cieATBShotCamNameTFPath`;

	// Verify the name and get the model panel
	if( $shotCamName == "" )
		warning( "Shot Camera name not specified" );
	
	else if (!objExists($shotCamName))
		warning( $shotCamName + " does not exist.");

	else {
		// switch the cameras		
		$lastPanelWithFocus = `getPanel -wf`;
		
		if( !`modelEditor -q -ex $lastPanelWithFocus` ) {
			warning( "Please select a camera viewport" );		
		}
		else {
			// If the view is not the shotCam or persp cameras
			// it will default to the persp camera
			if (`modelPanel -q -camera $lastPanelWithFocus` == "persp")
				modelPanel -e -camera $shotCamName $lastPanelWithFocus;
			else
				modelPanel -e -camera "persp" $lastPanelWithFocus;
			
			cie_atbRestoreWindowFocus();
		}
	}
}

//*****************************************************************
// Name: cie_atbPopulateCameraList
// Desc: Finds all the current "shot" cameras and adds
//       them to the popup menu
//*****************************************************************
global proc cie_atbPopulateCameraList()
{
	
	global string $g_cieATBShotCamList[];
	
	global string $g_cieATBIncludeOrthoMenuPath;
	
	
	
	int $includeOrtho = `menuItem -q -checkBox $g_cieATBIncludeOrthoMenuPath`;
	
	// Populate the list based on the menu options 
	if( $includeOrtho ) {
		$g_cieATBShotCamList = `listCameras -o`;
		string $perspCams[] =  `listCameras -p`;
		
		// Place the ortho cams first on the list
		for( $i = 0; $i < size($perspCams); $i++ )
			$g_cieATBShotCamList[size($g_cieATBShotCamList)] = $perspCams[$i];	
	}
	else
		$g_cieATBShotCamList = `listCameras -p`;	
	
	int $numCameras = size( $g_cieATBShotCamList );
	
}

//*****************************************************************
// Name: cie_atbUpdateShotCamMenu
// Desc: Finds all the current "shot" cameras and adds
//       them to the camera popup menu
//*****************************************************************
global proc cie_atbUpdateShotCamMenu()
{
	global string $g_cieATBShotCamNameTFPath;
	global string $g_cieATBShotCamPopupMenuPath;
	global string $g_cieATBShotCamList[];	
	
	// clear the old menu items from the popup menu
	popupMenu -e -dai $g_cieATBShotCamPopupMenuPath;
	
	cie_atbPopulateCameraList();
	
	int $numCameras = size( $g_cieATBShotCamList );
	
	// default if there are no shot cams
	// persp will always be on the list
	if( $numCameras == 1 )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l "No Cameras Available";
	
	// MEL cannot interpret varibles in a command so...
	// Manage up to 10 cameras
	if( $numCameras > 0 && $g_cieATBShotCamList[0] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[0]
				 -c "cie_atbUpdateShotCamTF(0)";
	if( $numCameras > 1 && $g_cieATBShotCamList[1] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[1]
				 -c "cie_atbUpdateShotCamTF(1)";
	if( $numCameras > 2 && $g_cieATBShotCamList[2] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[2]
				 -c "cie_atbUpdateShotCamTF(2)";
	if( $numCameras > 3 && $g_cieATBShotCamList[3] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[3]
				 -c "cie_atbUpdateShotCamTF(3)";
	if( $numCameras > 4 && $g_cieATBShotCamList[4] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[4]
				 -c "cie_atbUpdateShotCamTF(4)";
	if( $numCameras > 5 && $g_cieATBShotCamList[5] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[5]
				 -c "cie_atbUpdateShotCamTF(5)";
	if( $numCameras > 6 && $g_cieATBShotCamList[6] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[6]
				 -c "cie_atbUpdateShotCamTF(6)";
	if( $numCameras > 7 && $g_cieATBShotCamList[7] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[7]
				 -c "cie_atbUpdateShotCamTF(7)";
	if( $numCameras > 8 && $g_cieATBShotCamList[8] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[8]
				 -c "cie_atbUpdateShotCamTF(8)";
	if( $numCameras > 9 && $g_cieATBShotCamList[9] != "persp" )
		menuItem -p $g_cieATBShotCamPopupMenuPath
		         -l $g_cieATBShotCamList[9]
				 -c "cie_atbUpdateShotCamTF(9)";
}

//*****************************************************************
// Name: cie_atbUpdateShotCamTF
// Desc: Updates the shotCam text field with the current
//       ShotCam
//*****************************************************************
global proc cie_atbUpdateShotCamTF( int $shotCamIndex )
{
	global string $g_cieATBShotCamNameTFPath;
	global string $g_cieATBShotCamList[];
	
	string $shotCamName = $g_cieATBShotCamList[$shotCamIndex];
	textField -e -tx $shotCamName $g_cieATBShotCamNameTFPath;
}

//*****************************************************************
// Name: cie_atbSetTangents
// Desc: Modifies the tangents for the selected objects
//*****************************************************************
global proc cie_atbSetTangents( string $tangentType )
{
	global string $g_cieATBTangentTimelineCB;
	global string $g_cieATBTangentToggleButton;
	global string $g_cieATBModifyTangentIcon;
	
	global string $gPlayBackSlider;
	
	// Is a range selected in the timeline
	int $useSelected = `timeControl -q -rv $gPlayBackSlider`;
		
	// Test if the range checkbox is selected
	int $useRange = `checkBox -q -v $g_cieATBTangentTimelineCB`;
	
	// Test if the global tangent type should be changed
	string $currentImageName = `iconTextButton -q -i $g_cieATBTangentToggleButton`;
	if( $currentImageName == $g_cieATBModifyTangentIcon ) {
		// Only adjust the global tangent types (The modify
		// button has been toggled on)
		keyTangent -g -ott $tangentType;
		if( $tangentType != "step" )
			keyTangent -g -itt $tangentType;
		
		// Update the image with the new tangent type
		cie_atbToggleCurrentTangentImage();
		
		print( "The global tangent types have been set to " + $tangentType + "\n" );
	}
	
	else {
		// Modify the tangents for the selected objects
		if( size(`ls -sl`) == 0 ) {
			warning( "No objects selected to set tangents" );	
		}
		else {
			if( $useSelected )
				timeSliderSetTangent $tangentType;
			else {
				float $minTime, $maxTime;
				
				if( $useRange ) {
					$minTime = `playbackOptions -q -min`;
					$maxTime = `playbackOptions -q -max`;
				}
				else {
					$minTime = `playbackOptions -q -ast`;
					$maxTime = `playbackOptions -q -aet`;
				}
				
				string $timeRange = ($minTime + ":" + $maxTime);
				
				if( $tangentType != "step" )	
					keyTangent -t $timeRange -itt $tangentType -ott $tangentType;
				else
					keyTangent -t $timeRange -ott $tangentType;
			}
		}
	}
}

//*****************************************************************
// Name: cie_atbSetCurrentTangentImage
// Desc: Sets the current tangent image to match the current
//       tangent global setting (expects uniform in/out unless
//       stepped is the current out tangent)
//*****************************************************************
global proc cie_atbSetCurrentTangentImage()
{
	global string $g_cieATBTangentToggleButton;
	global string $g_cieATBModifyTangentIcon;
	
	string $currentTangents[] = `keyTangent -q -g -ott`;

	if( $currentTangents[0] == "spline" )
		iconTextButton -e -i "splineTangent.xpm" $g_cieATBTangentToggleButton;
	else if( $currentTangents[0] == "clamped" )
		iconTextButton -e -i "clampedTangent.xpm" $g_cieATBTangentToggleButton;
	else if( $currentTangents[0] == "linear" )
		iconTextButton -e -i "linearTangent.xpm" $g_cieATBTangentToggleButton;
	else if( $currentTangents[0] == "flat" )
		iconTextButton -e -i "flatTangent.xpm" $g_cieATBTangentToggleButton;
	else if( $currentTangents[0] == "step" )
		iconTextButton -e -i "stepTangent.xpm" $g_cieATBTangentToggleButton;
	else if( $currentTangents[0] == "plateau" )
		iconTextButton -e -i "plateauTangent.xpm" $g_cieATBTangentToggleButton;
	else if( $currentTangents[0] == "auto" )
		iconTextButton -e -i "autoTangent.xpm" $g_cieATBTangentToggleButton;
	else
		iconTextButton -e -i $g_cieATBModifyTangentIcon $g_cieATBTangentToggleButton;
}

//*****************************************************************
// Name: cie_atbToggleCurrentTangentImage
// Desc: Toggle the tangent image between the current tangent
//       type and the ? icon
//*****************************************************************
global proc cie_atbToggleCurrentTangentImage()
{
	global string $g_cieATBTangentToggleButton;
	global string $g_cieATBModifyTangentIcon;
	
	string $currentImage = `iconTextButton -q -i $g_cieATBTangentToggleButton`;
	
	if( $currentImage != $g_cieATBModifyTangentIcon )
		iconTextButton -e -i $g_cieATBModifyTangentIcon $g_cieATBTangentToggleButton;
	else
		cie_atbSetCurrentTangentImage();
}
	

//*****************************************************************
// Name: cie_atbToggleGraphEditor
// Desc: Toggles the display of the graph editor
//*****************************************************************
global proc cie_atbToggleGraphEditor()
{
	string $windowName = "graphEditor1Window";

	if (`window -exists $windowName`)
		deleteUI $windowName;
	else
		GraphEditor;
}

//*****************************************************************
// Name: cie_atbToggleGraphEditor
// Desc: Toggles the display of the graph editor
//*****************************************************************
global proc cie_atbToggleDopeSheet()
{
	string $windowName = "dopeSheetPanel1Window";
	
	if (`window -exists $windowName`)
		deleteUI $windowName;
	else
		DopeSheetEditor;	
}

//*****************************************************************
// Name: cie_atbIncrementalSave
// Desc: Increments the file name (or appends a new increment
//       extension) and save.  The Maya incremental save
//       method will be used if it is enable in the save options
//*****************************************************************
global proc cie_atbIncrementalSave()
{
	if( `optionVar -ex isIncrementalSaveEnabled` && `optionVar -q isIncrementalSaveEnabled` )
			SaveScene;			
	else
		cieIncrementalSave();
}

//*****************************************************************
// Name: cie_atbRestoreWindowFocus
// Desc: Restores the window focus to the last window if the
//       options flag is set
//*****************************************************************
global proc cie_atbRestoreWindowFocus()
{
	global string $g_cieATBRestoreLastWindowFocusPath;
	
	if( `menuItem -q -cb $g_cieATBRestoreLastWindowFocusPath` )
		restoreLastPanelWithFocus();
	
}

//*****************************************************************
// Name: cie_atbSnapToObject
// Desc: Snaps the translation and rotation of the
//       selected objects (children) to the last selected
//       object (parent).  If setKey is true, then
//       a key will be set on the child at the current time
//*****************************************************************
global proc cie_atbSnapToObject( int $setKey )
{
	string $selected[] = `ls -sl`;
	int $numSelected = `size( $selected )`;
	
	if( $numSelected < 2 ) {
		warning( "At least two objects must be selected" );
	}
	else {
		// All objects will be snapped to the last object selected
		int $parentIndex = $numSelected - 1;
		
		// Get the rotation and position of the parent
		float $position[] = `xform -q -ws -rp $selected[$parentIndex]`;
		float $rotation[] = `xform -q -ws -ro $selected[$parentIndex]`;
		
		// Update trans/rot for each object
		int $index;
		for( $index = 0; $index < $parentIndex; $index++ ) {
			rotate -ws $rotation[0] $rotation[1] $rotation[2] $selected[$index];
			move -a -ws -rpr $position[0] $position[1] $position[2] $selected[$index];
			
			if( $setKey )
				setKeyframe $selected[$index];
		}
	}
}


//*****************************************************************
// Name: cie_atbShotMask
// Desc: Creates a shot mask for a camera
//*****************************************************************
global proc cie_atbShotMask()
{
	global string $g_cieATBShotMaskTitleField;
	global string $g_cieATBShotMaskText1Field;
	global string $g_cieATBShotMaskText2Field;
	
	global string $g_cieATBShotMaskGateRBG;
	global string $g_cieATBShotMaskEdgePercentField;
	
	// Get the current viewport camera
	$camera = cie_atbGetViewportCamera();

	if( $camera != "" )	{
		
		// Update the shot mask details locator
		cie_atbShotMaskCreateLocator();
		
		string $title = `textFieldGrp -q -tx $g_cieATBShotMaskTitleField`;
		string $text1 = `textFieldGrp -q -tx $g_cieATBShotMaskText1Field`;
		string $text2 = `textFieldGrp -q -tx $g_cieATBShotMaskText2Field`;
		
		$title = substituteAllString( $title, "\\", "\\\\" );
		$title = substituteAllString( $title, "\"", "\\\"" );
		$text1 = substituteAllString( $text1, "\\", "\\\\" );
		$text1 = substituteAllString( $text1, "\"", "\\\"" );
		$text2 = substituteAllString( $text2, "\\", "\\\\" );
		$text2 = substituteAllString( $text2, "\"", "\\\"" );
		
		// Thickness needs to be converted to a decimal between 0.0 and 1.0
		float $maskThickness = (`intFieldGrp -q -v1 $g_cieATBShotMaskEdgePercentField` / 100.0);
		
		// 1 for resolution gate, 2 for film gate
		int $gate = `radioButtonGrp -q -sl $g_cieATBShotMaskGateRBG`;
		
		if( $gate == 1 ) {
			// Get the current aspect ratio
			float $aspectRatio = `getAttr defaultResolution.deviceAspectRatio`;
			
			cieShotMask -cam $camera
			            -t $title 
					    -t1 $text1 
					    -t2 $text2
						-ar $aspectRatio
						-mt $maskThickness
					    ;
		}
		else {
			// When the aspect ratio isn't provided,
			// the film gate is used
			cieShotMask -cam $camera
			            -t $title 
					    -t1 $text1 
					    -t2 $text2
						-mt $maskThickness
					    ;
		}
		
		//cie_atbCreateShotMaskFixer();
		cie_atbShotMaskUpdateAppearance();
	}
}



//*****************************************************************
// Name: cie_atbShotMaskUpdateAppearance
// Desc: Updates the appearance of the shot mask when created
//       to match the values in the UI
//*****************************************************************
global proc cie_atbShotMaskUpdateAppearance()
{
	global string $g_cieATBShotMaskUseUniformTranspCB;
	
	int $uniformTransparency = `checkBox -q -v $g_cieATBShotMaskUseUniformTranspCB`;
	// Update the transparencies
	cie_atbShotMaskUpdateBorderTransp();
	
	// If not uniform, manually do update remaining transparencies
	if( !$uniformTransparency ) {
		cie_atbShotMaskUpdateTextTransp();
		cie_atbShotMaskUpdateKeyTransp();
		cie_atbShotMaskUpdateBkDnTransp();
		cie_atbShotMaskUpdateLtbxTransp();
	}
	
	// Update the scale values
	cie_atbShotMaskUpdateTitleScale();
	cie_atbShotMaskUpdateSubTitleScale();
	cie_atbShotMaskUpdateCounterScale();
	
	// Set the colors to match the UI setting
	cie_atbShotMaskUpdateBorderColor();
	cie_atbShotMaskUpdateTextColor();	
	cie_atbShotMaskUpdateKeyColor();
	cie_atbShotMaskUpdateBkDnColor();
	cie_atbShotMaskUpdateLtbxColor();
	
	// Update the visibility
	cie_atbShotMaskUpdateTitleBarVis();
	cie_atbShotMaskUpdateSubTitleBarVis();
	cie_atbShotMaskUpdateSidebarVis();
	cie_atbShotMaskUpdateFrameCounterVis();
	cie_atbShotMaskUpdateLtbxVis();
	cie_atbShotMaskUpdateTextVis();
	
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateTransparency
// Desc: Updates the transparency of the shot mask
//*****************************************************************
global proc cie_atbShotMaskUpdateTransparency() {
	global string $g_cieATBShotMaskUseUniformTranspCB;
	
	global string $g_cieATBShotMaskBorderTranspCSG;
	global string $g_cieATBShotMaskTextTranspCSG;
	global string $g_cieATBShotMaskKeyTranspCSG;
	global string $g_cieATBShotMaskBkDnTranspCSG;
	
	int $uniformTransparency = `checkBox -q -v $g_cieATBShotMaskUseUniformTranspCB`;
	
	if( $uniformTransparency ) {
		// Update individual controls values and disable them
		float $transp[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskBorderTranspCSG`;

		// Set the colors
		colorSliderGrp -e -rgb $transp[0] $transp[1] $transp[2] $g_cieATBShotMaskTextTranspCSG;
		colorSliderGrp -e -rgb $transp[0] $transp[1] $transp[2] $g_cieATBShotMaskKeyTranspCSG;
		colorSliderGrp -e -rgb $transp[0] $transp[1] $transp[2] $g_cieATBShotMaskBkDnTranspCSG;
		
		// Lock the controls
		colorSliderGrp -e -en false $g_cieATBShotMaskTextTranspCSG;
		colorSliderGrp -e -en false $g_cieATBShotMaskKeyTranspCSG;
		colorSliderGrp -e -en false $g_cieATBShotMaskBkDnTranspCSG;		
	}
	else { 
		// Unlock the controls
		colorSliderGrp -e -en true $g_cieATBShotMaskTextTranspCSG;
		colorSliderGrp -e -en true $g_cieATBShotMaskKeyTranspCSG;
		colorSliderGrp -e -en true $g_cieATBShotMaskBkDnTranspCSG;
	}		
	
	// Update the colors
	cie_atbShotMaskUpdateTextTransp();
	cie_atbShotMaskUpdateKeyTransp();
	cie_atbShotMaskUpdateBkDnTransp();
	cie_atbShotMaskUpdateLtbxTransp();
			

	
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateBorderColor
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateBorderColor()
{
	global string $g_cieATBShotMaskBorderColorCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $color[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskBorderColorCSG`;
	
	if( `objExists "atbShotMaskBorder_shdr"` )
		setAttr "atbShotMaskBorder_shdr.color" -type double3 $color[0] $color[1] $color[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".MaskColor") -type double3 $color[0] $color[1] $color[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateBorderTransp
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateBorderTransp()
{
	global string $g_cieATBShotMaskBorderTranspCSG;
	global string $g_cieATBShotMaskUseUniformTranspCB;
	global string $g_cieATBShotMaskDetailsName;
	
	int $uniformTransparency = `checkBox -q -v $g_cieATBShotMaskUseUniformTranspCB`;
	
	float $transp[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskBorderTranspCSG`;
	
	if( `objExists "atbShotMaskBorder_shdr"` ) {
		setAttr "atbShotMaskBorder_shdr.transparency" -type double3 $transp[0] $transp[1] $transp[2];
	}
	if( $uniformTransparency ) {
		// Update the other controls
		cie_atbShotMaskUpdateTransparency();		
	}
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".MaskTransp") -type double3 $transp[0] $transp[1] $transp[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateTextColor
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateTextColor()
{
	global string $g_cieATBShotMaskTextColorCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $color[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskTextColorCSG`;
	
	if( `objExists "atbShotMaskText_shdr"` )
		setAttr "atbShotMaskText_shdr.color" -type double3 $color[0] $color[1] $color[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".TextColor") -type double3 $color[0] $color[1] $color[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateTextTransp
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateTextTransp()
{
	global string $g_cieATBShotMaskTextTranspCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $transp[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskTextTranspCSG`;
	
	if( `objExists "atbShotMaskText_shdr"` )	
		setAttr "atbShotMaskText_shdr.transparency" -type double3 $transp[0] $transp[1] $transp[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".TextTransp") -type double3 $transp[0] $transp[1] $transp[2];
}


//*****************************************************************
// Name: cie_atbShotMaskUpdateKeyColor
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateKeyColor()
{
	global string $g_cieATBShotMaskKeyColorCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $color[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskKeyColorCSG`;
	
	if( `objExists "atbShotMaskKeyIcon_shdr"` )	
		setAttr "atbShotMaskKeyIcon_shdr.color" -type double3 $color[0] $color[1] $color[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".KeyColor") -type double3 $color[0] $color[1] $color[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateKeyTransp
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateKeyTransp()
{
	global string $g_cieATBShotMaskKeyTranspCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $transp[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskKeyTranspCSG`;
	
	if( `objExists "atbShotMaskKeyIcon_shdr"` )
		setAttr "atbShotMaskKeyIcon_shdr.transparency" -type double3 $transp[0] $transp[1] $transp[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".KeyTransp") -type double3 $transp[0] $transp[1] $transp[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateBkDnColor
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateBkDnColor()
{
	global string $g_cieATBShotMaskBkDnColorCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $color[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskBkDnColorCSG`;
	
	if( `objExists "atbShotMaskBDIcon_shdr"` )
		setAttr "atbShotMaskBDIcon_shdr.color" -type double3 $color[0] $color[1] $color[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".BkDnColor") -type double3 $color[0] $color[1] $color[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateBkDnTransp
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateBkDnTransp()
{
	global string $g_cieATBShotMaskBkDnTranspCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $transp[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskBkDnTranspCSG`;
	
	if( `objExists "atbShotMaskBDIcon_shdr"` )
		setAttr "atbShotMaskBDIcon_shdr.transparency" -type double3 $transp[0] $transp[1] $transp[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".BkDnTransp") -type double3 $transp[0] $transp[1] $transp[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateLtbxColor
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateLtbxColor()
{
	global string $g_cieATBShotMaskLtbxColorCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $color[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskLtbxColorCSG`;
	
	if( `objExists "atbShotMaskBDIcon_shdr"` )
		setAttr "atbShotMaskLtbx_shdr.color" -type double3 $color[0] $color[1] $color[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".LtbxColor") -type double3 $color[0] $color[1] $color[2];
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateLtbxTransp
// Desc: 
//*****************************************************************
global proc cie_atbShotMaskUpdateLtbxTransp()
{
	global string $g_cieATBShotMaskLtbxTranspCSG;
	global string $g_cieATBShotMaskDetailsName;
	
	float $transp[] = `colorSliderGrp -q -rgb $g_cieATBShotMaskLtbxTranspCSG`;
	
	if( `objExists "atbShotMaskBDIcon_shdr"` )
		setAttr "atbShotMaskLtbx_shdr.transparency" -type double3 $transp[0] $transp[1] $transp[2];
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".LtbxTransp") -type double3 $transp[0] $transp[1] $transp[2];
}


//*****************************************************************
// Name: cie_atbGetViewportCamera
// Desc: Sets the camera based on the current active viewport
//*****************************************************************
global proc string cie_atbGetViewportCamera()
{	
	string $camera = "";
	
	// Determine the current camera viewport
	string $lastPanelWithFocus = `getPanel -wf`;
	
	if( !`modelEditor -q -ex $lastPanelWithFocus` ) {
		warning( "Please select a camera viewport" );		
	}
	else {
		// Get the camera associated with the viewport
		$camera = `modelEditor -q -cam $lastPanelWithFocus`;
		
		// Get the transform node of the camera
		if( `nodeType $camera` != "transform" ) {
			string $transform[] = `listRelatives -p $camera`;
			$camera = $transform[0];
		}
			
	}
	
	return $camera;
}

//*****************************************************************
// Name: cie_atbShotMaskGetRootObj
// Desc: Sets the shot mask root obj based on the currently
//       selected objects
//*****************************************************************
global proc cie_atbShotMaskGetRootObj()
{
	global string $g_cieATBShotMaskRootObjField;
	
	string $selectedArray[] = `ls -sl`;
	
	if( size($selectedArray) == 0 )
		textFieldGrp -e -tx "" $g_cieATBShotMaskRootObjField;
	else {
		string $selectedAsString = stringArrayToString( $selectedArray, " " );
		textFieldGrp -e -tx $selectedAsString $g_cieATBShotMaskRootObjField;
	}
	
	cie_atbShotMaskUpdateRootObj();
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateRootObj
// Desc: Sets the shot mask root obj based on the currently
//       selected objects
//*****************************************************************
global proc cie_atbShotMaskUpdateRootObj()
{
	global string $g_cieATBShotMaskRootObj;
	global string $g_cieATBShotMaskRootObjField;
	global string $g_cieATBShotMaskDetailsName;
	
	$g_cieATBShotMaskRootObj = `textFieldGrp -q -tx $g_cieATBShotMaskRootObjField`;
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr -type "string" ($g_cieATBShotMaskDetailsName + ".RootObject") $g_cieATBShotMaskRootObj;
	
	currentTime -e `currentTime -q`;
}

//*****************************************************************
// Name: cie_atbGetSceneName
// Desc: Returns the name of the current scene
//*****************************************************************
global proc string cie_atbGetSceneName()
{
	// Get teh current scene name
	string $sceneName = `file -q -sn -shn`;
	int $length = `size( $sceneName )`;
	
	if( $length == 0 )
		$sceneName = "Untitled";
	else {
		string $suffix = `substring $sceneName ($length - 2) $length`;
		// if this is an ma or mb file, remove the suffix
		if( $suffix == ".ma" || $suffix == ".mb" ) {
			$sceneName = `substring $sceneName 1 ($length -3)`;
		}	
	}
	
	return $sceneName;
	
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateSidebarVis
// Desc: Updates the visibility of the side edges
//*****************************************************************
global proc cie_atbShotMaskUpdateSidebarVis()
{
	global string $g_cieATBShotMaskDisplaySideEdgesCB;
	global string $g_cieATBShotMaskDetailsName;
	
	int $visibility = `checkBox -q -v $g_cieATBShotMaskDisplaySideEdgesCB`;
	
	if( `objExists atbFrameSides_grp` )
			setAttr "atbFrameSides_grp.visibility" $visibility;
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".SideBarsVisible") $visibility;
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateTitleBarVis
// Desc: Updates the visibility of the title bar
//*****************************************************************
global proc cie_atbShotMaskUpdateTitleBarVis()
{
	global string $g_cieATBShotMaskDisplayTitleBarCB;
	global string $g_cieATBShotMaskDetailsName;
	
	int $visibility = `checkBox -q -v $g_cieATBShotMaskDisplayTitleBarCB`;
	
	if( `objExists atbFrameTop_geo` )
			setAttr "atbFrameTop_geo.visibility" $visibility;
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".TitleBarVisible") $visibility;
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateSubTitleBarVis
// Desc: Updates the visibility of the subtitle bar
//*****************************************************************
global proc cie_atbShotMaskUpdateSubTitleBarVis()
{
	global string $g_cieATBShotMaskDisplaySubTitleBarCB;
	global string $g_cieATBShotMaskDetailsName;
	
	int $visibility = `checkBox -q -v $g_cieATBShotMaskDisplaySubTitleBarCB`;
	
	if( `objExists atbFrameBottom_geo` )
			setAttr "atbFrameBottom_geo.visibility" $visibility;

	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".SubTitleBarVisible") $visibility;
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateFrameCounterVis
// Desc: Updates the visibility of the frame counter
//*****************************************************************
global proc cie_atbShotMaskUpdateFrameCounterVis()
{
	global string $g_cieATBShotMaskDisplayFrameCounterCB;
	global string $g_cieATBShotMaskDetailsName;
	
	int $visibility = `checkBox -q -v	$g_cieATBShotMaskDisplayFrameCounterCB`;
	
	if( `objExists atbFrameCounter_grp` )
			setAttr "atbFrameCounter_grp.visibility" $visibility;
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".CounterVisible") $visibility;
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateTextVis
// Desc: Updates the visibility of the text
//*****************************************************************
global proc cie_atbShotMaskUpdateTextVis()
{
	global string $g_cieATBShotMaskDisplayTextCB;
	global string $g_cieATBShotMaskDetailsName;
	
	int $visibility = `checkBox -q -v $g_cieATBShotMaskDisplayTextCB`;
	
	if( `objExists atbShotMaskTitleText_grp` )
		setAttr "atbShotMaskTitleText_grp.visibility" $visibility;
	if( `objExists atbShotMaskBLText_grp` )
		setAttr "atbShotMaskBLText_grp.visibility" $visibility;
	if( `objExists atbShotMaskBRText_grp` )
		setAttr "atbShotMaskBRText_grp.visibility" $visibility;
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".TextVisible") $visibility;
	
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateLtbxVis
// Desc: Updates the visibility of the frame counter
//*****************************************************************
global proc cie_atbShotMaskUpdateLtbxVis()
{
	global string $g_cieATBShotMaskDisplayLtbxCB;
	global string $g_cieATBShotMaskDetailsName;
	
	int $visibility = `checkBox -q -v	$g_cieATBShotMaskDisplayLtbxCB`;
	
	if( `objExists atbLetterbox_grp` )
			setAttr "atbLetterbox_grp.visibility" $visibility;
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".LetterboxVisible") $visibility;

}

//*****************************************************************
// Name: cie_atbShotMaskUpdateEdgeThickness
// Desc: Updates the visibility of the frame counter
//*****************************************************************
global proc cie_atbShotMaskUpdateEdgeThickness()
{
	global string $g_cieATBShotMaskEdgePercentField;
	
	int $minThickness = 2, $maxThickness = 15;
	
	int $thickness = `intFieldGrp -q -v1 $g_cieATBShotMaskEdgePercentField`;
	
	if( $thickness < $minThickness ) {
		warning( "Minimum Thickness is " + $minThickness );
		$thickness = $minThickness;
		intFieldGrp -e -v1 $thickness $g_cieATBShotMaskEdgePercentField;
	}
	else if( $thickness > $maxThickness ) {
		warning( "Maximum Thickness is " + $maxThickness );
		$thickness = $maxThickness;
		intFieldGrp -e -v1 $thickness $g_cieATBShotMaskEdgePercentField;
	}
	
	// Rebuild the shot mask (if it exists)
	if( `objExists "atbShotMask_grp"` )
		cie_atbShotMask();
	else
		warning( "A shot mask has not been created" );
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateTitleScale
// Desc: Updates the scaling on the title text
//*****************************************************************
global proc cie_atbShotMaskUpdateTitleScale()
{
	global string $g_cieATBShotMaskTitleScaleField;
	global string $g_cieATBShotMaskDetailsName;
	
	float $scaleMin = 0.2;
	float $scaleMax = 100.0;
	
	string $fcGrpName = "atbTitleText";
	
	float $scaleValueX = `floatFieldGrp -q -v1 $g_cieATBShotMaskTitleScaleField`;
	float $scaleValueY = `floatFieldGrp -q -v2 $g_cieATBShotMaskTitleScaleField`;
	
	if( $scaleValueX < $scaleMin )
		$scaleValueX = $scaleMin;
	else if( $scaleValueX > $scaleMax )
		$scaleValueX = $scaleMax;
	
	if( $scaleValueY < $scaleMin )
		$scaleValueY = $scaleMin;
	else if( $scaleValueY > $scaleMax )
		$scaleValueY = $scaleMax;
	
	floatFieldGrp -e -v $scaleValueX $scaleValueY 1.0 1.0 $g_cieATBShotMaskTitleScaleField;
	
	if( `objExists $fcGrpName` ) {	
		setAttr ($fcGrpName + ".scaleX") $scaleValueX;
		setAttr ($fcGrpName + ".scaleY") $scaleValueY;
	}
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".TitleScale") -type float2 $scaleValueX $scaleValueY;
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateSubTitleScale
// Desc: Updates the scaling on the subtitle text
//*****************************************************************
global proc cie_atbShotMaskUpdateSubTitleScale()
{
	global string $g_cieATBShotMaskSubtitleScaleField;
	global string $g_cieATBShotMaskDetailsName;
	
	float $scaleMin = 0.2;
	float $scaleMax = 100.0;
	
	string $fcGrpNameLeft = "atbBottomLeftText";
	string $fcGrpNameRight = "atbBottomRightText";
	
	float $scaleValueX = `floatFieldGrp -q -v1 $g_cieATBShotMaskSubtitleScaleField`;
	float $scaleValueY = `floatFieldGrp -q -v2 $g_cieATBShotMaskSubtitleScaleField`;
	
	if( $scaleValueX < $scaleMin )
		$scaleValueX = $scaleMin;
	else if( $scaleValueX > $scaleMax )
		$scaleValueX = $scaleMax;
	
	if( $scaleValueY < $scaleMin )
		$scaleValueY = $scaleMin;
	else if( $scaleValueY > $scaleMax )
		$scaleValueY = $scaleMax;
	
	floatFieldGrp -e -v $scaleValueX $scaleValueY 1.0 1.0 $g_cieATBShotMaskSubtitleScaleField;
	
	if( `objExists $fcGrpNameLeft` ) {	
		setAttr ($fcGrpNameLeft + ".scaleX") $scaleValueX;
		setAttr ($fcGrpNameLeft + ".scaleY") $scaleValueY;
	}
	if( `objExists $fcGrpNameRight` ) {	
		setAttr ($fcGrpNameRight + ".scaleX") $scaleValueX;
		setAttr ($fcGrpNameRight + ".scaleY") $scaleValueY;
	}
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".SubTitleScale") -type float2 $scaleValueX $scaleValueY;
}

//*****************************************************************
// Name: cie_atbShotMaskUpdateCounterScale
// Desc: Updates the scaling on the frame counter
//*****************************************************************
global proc cie_atbShotMaskUpdateCounterScale()
{
	
	global string $g_cieATBShotMaskCounterScaleField;
	global string $g_cieATBShotMaskDetailsName;
	
	float $scaleMin = 0.2;
	float $scaleMax = 100.0;
	
	string $fcGrpName = "atbFrameCounter_grp";
	
	float $scaleValueX = `floatFieldGrp -q -v1 $g_cieATBShotMaskCounterScaleField`;
	float $scaleValueY = `floatFieldGrp -q -v2 $g_cieATBShotMaskCounterScaleField`;
	
	if( $scaleValueX < $scaleMin )
		$scaleValueX = $scaleMin;
	else if( $scaleValueX > $scaleMax )
		$scaleValueX = $scaleMax;
	
	if( $scaleValueY < $scaleMin )
		$scaleValueY = $scaleMin;
	else if( $scaleValueY > $scaleMax )
		$scaleValueY = $scaleMax;
	
	floatFieldGrp -e -v $scaleValueX $scaleValueY 1.0 1.0 $g_cieATBShotMaskCounterScaleField;
	
	if( `objExists $fcGrpName` ) {	
		setAttr ($fcGrpName + ".scaleX") $scaleValueX;
		setAttr ($fcGrpName + ".scaleY") $scaleValueY;
	}
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
		setAttr ($g_cieATBShotMaskDetailsName + ".CounterScale") -type float2 $scaleValueX $scaleValueY;
	
}

//*****************************************************************
// Name: cie_atbShotMaskCreateLocator
// Desc: Creates the element for storing shot mask details
//       in the scene
//*****************************************************************
global proc cie_atbShotMaskCreateLocator()
{
	global string $g_cieATBShotMaskDetailsName;
	
	global string $g_cieATBShotMaskGateRBG;
	global string $g_cieATBShotMaskTitleField;
	global string $g_cieATBShotMaskText1Field;
	global string $g_cieATBShotMaskText2Field;
	global string $g_cieATBShotMaskEdgePercentField;

	
	// Create new locator if it doesn't exist
	if( !`objExists $g_cieATBShotMaskDetailsName` )
	{
		string $locName[] = `spaceLocator -p 0 0 0 `;
		rename $locName[0] $g_cieATBShotMaskDetailsName;
		
		setAttr ($g_cieATBShotMaskDetailsName + ".v") 0;
		setAttr ($g_cieATBShotMaskDetailsName + ".overrideEnabled") 1;
		setAttr ($g_cieATBShotMaskDetailsName + ".overrideDisplayType") 2;
		
		int $hidden = true;
		
		addAttr -ln "Gate" -at long -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "Title" -dt "string" -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "SubTitle1" -dt "string" -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "SubTitle2" -dt "string" -h $hidden $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "RootObject" -dt "string" -h $hidden $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "EdgeThickness" -at long -h $hidden $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "TitleScale" -at float2 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "TitleScaleX" -at "float" -p "TitleScale" $g_cieATBShotMaskDetailsName;
		addAttr -ln "TitleScaleY" -at "float" -p "TitleScale" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "SubTitleScale" -at float2 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "SubTitleScaleX" -at "float" -p "SubTitleScale" $g_cieATBShotMaskDetailsName;
		addAttr -ln "SubTitleScaleY" -at "float" -p "SubTitleScale" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "CounterScale" -at float2 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "CounterScaleX" -at "float" -p "CounterScale" $g_cieATBShotMaskDetailsName;
		addAttr -ln "CounterScaleY" -at "float" -p "CounterScale" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "TextVisible" -at bool -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "CounterVisible" -at bool -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "TitleBarVisible" -at bool -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "SubTitleBarVisible" -at bool -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "SideBarsVisible" -at bool -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "LetterboxVisible" -at bool -h $hidden $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "UniformTransparency" -at bool -h $hidden $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "MaskColor" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "MaskColorX" -at double -p "MaskColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "MaskColorY" -at double -p "MaskColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "MaskColorZ" -at double -p "MaskColor" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "MaskTransp" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "MaskTranspX" -at double -p "MaskTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "MaskTranspY" -at double -p "MaskTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "MaskTranspZ" -at double -p "MaskTransp" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "TextColor" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "TextColorX" -at double -p "TextColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "TextColorY" -at double -p "TextColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "TextColorZ" -at double -p "TextColor" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "TextTransp" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "TextTranspX" -at double -p "TextTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "TextTranspY" -at double -p "TextTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "TextTranspZ" -at double -p "TextTransp" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "KeyColor" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "KeyColorX" -at double -p "KeyColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "KeyColorY" -at double -p "KeyColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "KeyColorZ" -at double -p "KeyColor" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "KeyTransp" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "KeyTranspX" -at double -p "KeyTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "KeyTranspY" -at double -p "KeyTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "KeyTranspZ" -at double -p "KeyTransp" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "BkDnColor" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "BkDnColorX" -at double -p "BkDnColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "BkDnColorY" -at double -p "BkDnColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "BkDnColorZ" -at double -p "BkDnColor" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "BkDnTransp" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "BkDnTranspX" -at double -p "BkDnTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "BkDnTranspY" -at double -p "BkDnTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "BkDnTranspZ" -at double -p "BkDnTransp" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "LtbxColor" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "LtbxColorX" -at double -p "LtbxColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "LtbxColorY" -at double -p "LtbxColor" $g_cieATBShotMaskDetailsName;
		addAttr -ln "LtbxColorZ" -at double -p "LtbxColor" $g_cieATBShotMaskDetailsName;
		
		addAttr -ln "LtbxTransp" -at double3 -h $hidden $g_cieATBShotMaskDetailsName;
		addAttr -ln "LtbxTranspX" -at double -p "LtbxTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "LtbxTranspY" -at double -p "LtbxTransp" $g_cieATBShotMaskDetailsName;
		addAttr -ln "LtbxTranspZ" -at double -p "LtbxTransp" $g_cieATBShotMaskDetailsName;
			
	}
	
	// Update the attributes (only those that require a shotmask rebuild to change)
	// The rest are updated by cie_atbShotMaskUpdateAppearance()
	setAttr ($g_cieATBShotMaskDetailsName + ".Gate") `radioButtonGrp -q -sl $g_cieATBShotMaskGateRBG`;
	setAttr -type "string" ($g_cieATBShotMaskDetailsName + ".Title") `textFieldGrp -q -tx $g_cieATBShotMaskTitleField`;
	setAttr -type "string" ($g_cieATBShotMaskDetailsName + ".SubTitle1") `textFieldGrp -q -tx $g_cieATBShotMaskText1Field`;
	setAttr -type "string" ($g_cieATBShotMaskDetailsName + ".SubTitle2") `textFieldGrp -q -tx $g_cieATBShotMaskText2Field`;
	setAttr ($g_cieATBShotMaskDetailsName + ".EdgeThickness") `intFieldGrp -q -v1 $g_cieATBShotMaskEdgePercentField`;

	
}


//*****************************************************************
// Name: cie_atbShotMaskDeleteLocator
// Desc: Deletes the element for storing shot mask details
//       in the scene
//*****************************************************************
global proc cie_atbShotMaskDeleteLocator()
{
	global string $g_cieATBShotMaskDetailsName;

	if( `objExists $g_cieATBShotMaskDetailsName` )
		delete $g_cieATBShotMaskDetailsName;
}


//*****************************************************************
// Name: cie_atbShotMaskSyncDetails
// Desc: Update the GUI to match the details in ShotMask locator
//*****************************************************************
global proc cie_atbShotMaskSyncDetails()
{
	global string $g_cieATBShotMaskDetailsName;
	
	global string $g_cieATBShotMaskGateRBG;
	global string $g_cieATBShotMaskTitleField;
	global string $g_cieATBShotMaskText1Field;
	global string $g_cieATBShotMaskText2Field;
	global string $g_cieATBShotMaskRootObjField;
	global string $g_cieATBShotMaskEdgePercentField;
	global string $g_cieATBShotMaskTitleScaleField;
	global string $g_cieATBShotMaskSubtitleScaleField;
	global string $g_cieATBShotMaskCounterScaleField;
	
	global string $g_cieATBShotMaskDisplaySideEdgesCB;
	global string $g_cieATBShotMaskDisplayFrameCounterCB;
	global string $g_cieATBShotMaskDisplayLtbxCB;
	global string $g_cieATBShotMaskDisplayTextCB;
	global string $g_cieATBShotMaskDisplayTitleBarCB;
	global string $g_cieATBShotMaskDisplaySubTitleBarCB;
	
	global string $g_cieATBShotMaskUseUniformTranspCB;
	global string $g_cieATBShotMaskBorderColorCSG;
	global string $g_cieATBShotMaskBorderTranspCSG;
	global string $g_cieATBShotMaskTextColorCSG;
	global string $g_cieATBShotMaskTextTranspCSG;
	global string $g_cieATBShotMaskKeyColorCSG;
	global string $g_cieATBShotMaskKeyTranspCSG;
	global string $g_cieATBShotMaskBkDnColorCSG;
	global string $g_cieATBShotMaskBkDnTranspCSG;
	global string $g_cieATBShotMaskLtbxColorCSG;
	global string $g_cieATBShotMaskLtbxTranspCSG;
	
	if( `objExists $g_cieATBShotMaskDetailsName` )
	{
		radioButtonGrp -e -sl `getAttr ($g_cieATBShotMaskDetailsName + ".Gate")` $g_cieATBShotMaskGateRBG;
		textFieldGrp -e -tx `getAttr ($g_cieATBShotMaskDetailsName + ".Title")` $g_cieATBShotMaskTitleField;
		textFieldGrp -e -tx `getAttr ($g_cieATBShotMaskDetailsName + ".SubTitle1")` $g_cieATBShotMaskText1Field;
		textFieldGrp -e -tx `getAttr ($g_cieATBShotMaskDetailsName + ".SubTitle2")` $g_cieATBShotMaskText2Field;
		
		textFieldGrp -e -tx `getAttr ($g_cieATBShotMaskDetailsName + ".RootObject")` $g_cieATBShotMaskRootObjField;
		
		intFieldGrp -e -v1 `getAttr ($g_cieATBShotMaskDetailsName + ".EdgeThickness")` $g_cieATBShotMaskEdgePercentField;
				
		float $scale[] = `getAttr ($g_cieATBShotMaskDetailsName + ".TitleScale")`;
		floatFieldGrp -e -v $scale[0] $scale[1] 0.0 0.0 $g_cieATBShotMaskTitleScaleField;
		
		float $scale[] = `getAttr ($g_cieATBShotMaskDetailsName + ".SubTitleScale")`;
		floatFieldGrp -e -v $scale[0] $scale[1] 0.0 0.0 $g_cieATBShotMaskSubtitleScaleField;
		
		float $scale[] = `getAttr ($g_cieATBShotMaskDetailsName + ".CounterScale")`;
		floatFieldGrp -e -v $scale[0] $scale[1] 0.0 0.0 $g_cieATBShotMaskCounterScaleField;
		
		checkBox -e -v `getAttr ($g_cieATBShotMaskDetailsName + ".TextVisible")` $g_cieATBShotMaskDisplayTextCB;
		checkBox -e -v `getAttr ($g_cieATBShotMaskDetailsName + ".CounterVisible")` $g_cieATBShotMaskDisplayFrameCounterCB;
		checkBox -e -v `getAttr ($g_cieATBShotMaskDetailsName + ".TitleBarVisible")` $g_cieATBShotMaskDisplayTitleBarCB;
		checkBox -e -v `getAttr ($g_cieATBShotMaskDetailsName + ".SubTitleBarVisible")` $g_cieATBShotMaskDisplaySubTitleBarCB;
		checkBox -e -v `getAttr ($g_cieATBShotMaskDetailsName + ".SideBarsVisible")` $g_cieATBShotMaskDisplaySideEdgesCB;
		checkBox -e -v `getAttr ($g_cieATBShotMaskDetailsName + ".LetterboxVisible")` $g_cieATBShotMaskDisplayLtbxCB;
		
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".MaskColor")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskBorderColorCSG;
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".MaskTransp")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskBorderTranspCSG;
		
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".TextColor")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskTextColorCSG;
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".TextTransp")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskTextTranspCSG;
		
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".KeyColor")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskKeyColorCSG;
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".KeyTransp")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskKeyTranspCSG;
		
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".BkDnColor")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskBkDnColorCSG;
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".BkDnTransp")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskBkDnTranspCSG;
		
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".LtbxColor")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskLtbxColorCSG;
		float $color[] = `getAttr ($g_cieATBShotMaskDetailsName + ".LtbxTransp")`;
		colorSliderGrp -e -rgb $color[0] $color[1] $color[2] $g_cieATBShotMaskLtbxTranspCSG;

		// Update the root object
		cie_atbShotMaskUpdateRootObj();
	}
}


//*****************************************************************
// Name: cie_atbANIMBlast
// Desc: Creates a shot mask if it doesn't exist and creates
//       a playblast with no overscan
//*****************************************************************
global proc cie_atbANIMBlast()
{	
	global string $gPlayBackSlider;
	
	global string $g_cieATBShotMaskGeoOnlyCB;
	global string $g_cieATBShotMaskDisplayCB;
	global string $g_cieATBShotMaskAllPlayblastOptionsCB;
	
	string $camera = cie_atbGetViewportCamera();
	
	int $geoOnly = `checkBox -q -v $g_cieATBShotMaskGeoOnlyCB`;
	int $displaySM = `checkBox -q -v $g_cieATBShotMaskDisplayCB`;
	int $allPlayblastOptions = `checkBox -q -v $g_cieATBShotMaskAllPlayblastOptionsCB`;
	
	if( $camera != "" )
	{	
		// Store any selected objects to restore later
		string $selected[] = `ls -sl`;
		
		// The viewport associated with the camera
		string $panelWithFocus = `getPanel -wf`;
		
		// Get the current display and hide all non-geo object types
		int $displaySettings[];
		
		if( $geoOnly ) {
			$displaySettings = cie_atbViewportGetDisplay( $panelWithFocus );
			
			modelEditor -e -allObjects 0 $panelWithFocus;
			modelEditor -e -ns 1 $panelWithFocus;
			modelEditor -e -pm 1 $panelWithFocus;
			modelEditor -e -sds 1 $panelWithFocus;
		}
				
		// Determine if the shot mask is already created
		$shotMaskExists = `objExists "atbShotMask_grp"`;
		
		// If it doesn't exist and it should be displayed
		// create it
		if( !$shotMaskExists && $displaySM ) {
			cie_atbShotMask();
		}
		// Hide the shot mask if it shouldn't be displayed
		else if( $shotMaskExists && !$displaySM ) {
			setAttr "atbShotMask_grp.visibility" 0;
		}
					
		float $startFrame, $endFrame;
		
		if( `timeControl -q -rv $gPlayBackSlider` ) {
			float $selFrames[] = `timeControl -q -ra $gPlayBackSlider`;
		
			$startFrame = $selFrames[0];
			$endFrame = $selFrames[1] - 1;
		}
		else if( `optionVar -q playblastUseStartEnd` ) {
			$startFrame = `optionVar -q playblastStartTime`;
			$endFrame = `optionVar -q playblastEndTime`;
		}
		else {
			$startFrame = `playbackOptions -q -min`;
			$endFrame = `playbackOptions -q -max`;		
		}
		
		// The playblast options
		int $isViewer = `optionVar -q playblastViewerOn`;
		int $isShowOrnaments = `optionVar -q playblastShowOrnaments`;
		int $isOffscreen = `optionVar -q playblastOffscreen`;
		string $format = "movie";
		string $compression = `optionVar -q playblastCompression`;
		float $scale = `optionVar -q playblastScale`;
		int $displaySource = `optionVar -q playblastDisplaySizeSource`;
		int $displayWidth = `optionVar -q playblastWidth`;
		int $displayHeight = `optionVar -q playblastHeight`;
		int $isClearCache = `optionVar -q playblastClearCache`;	
		int $saveToFile = `optionVar -q playblastSaveToFile`;
		string $filename = `optionVar -q playblastFile`;
		
		// For Maya 8 and higher, a padding option was added
		int $framePadding = 4;
		if( `optionVar -ex playblastPadding` );
			$framePadding = `optionVar -q playblastPadding`;
		// Overwrite with the ANIMBlast defaults
		if( !$allPlayblastOptions ) {
			$isViewer = true;
			$isShowOrnaments = false;
			
			// From render globals
			$displaySource = 2;
			$displayWidth = `getAttr defaultResolution.w`;
			$displayHeight = `getAttr defaultResolution.h`;
		}
		
		// Store values so they can be restored after the playblast
		float $overscan = `camera -q -overscan $camera`;
		
		//deselect any selected objects
		select -cl;
		
		// Set the camera values for the playblast
		camera -e -overscan 1.0 $camera;

		string $args[] = {  (string)
			                $saveToFile,
			                $filename,
					        $isViewer,
					        $format,
					        $isShowOrnaments,
					        $scale,
					        $compression,
					        $displaySource,
					        $displayWidth,
					        $displayHeight,
							true,
							$startFrame,
							$endFrame,
							$isClearCache,
							false,
						    $framePadding };

		evalEcho("doPlayblastArgList(3, {}, {}, {\"" + stringArrayToString($args, "\", \"") + "\"})");
				
		// Restore the previous display settings if necessary
		if( $geoOnly )
			cie_atbViewportSetDisplay( $panelWithFocus, $displaySettings );
	
		// Restore the camera to its previous state
		camera -e -overscan $overscan $camera;

		// If the shot mask didn't exist before the ANIMBlast,
		// get rid of it
		if( !$shotMaskExists )
			cieShotMask -cs;
		// Restore visibility to the shot mask
		if( $shotMaskExists )
			setAttr "atbShotMask_grp.visibility" 1;
			
		// reselect any selected objects
		select -r $selected;
	}
}

//*****************************************************************
// Name: cie_atbViewportGetDisplay
// Desc: Gets the current display options
//*****************************************************************
global proc int[] cie_atbViewportGetDisplay( string $currentPanel )
{
	int $results[23];
	
	$results[0] = `modelEditor -q -nc $currentPanel`; $results[1] = `modelEditor -q -ns $currentPanel`;
	$results[2] = `modelEditor -q -pm $currentPanel`; $results[3] = `modelEditor -q -sds $currentPanel`;
	$results[4] = `modelEditor -q -pl $currentPanel`; $results[5] = `modelEditor -q -lt $currentPanel`;
	$results[6] = `modelEditor -q -ca $currentPanel`; $results[7] = `modelEditor -q -cv $currentPanel`;
	$results[8] = `modelEditor -q -gr $currentPanel`; $results[9] = `modelEditor -q -j $currentPanel`;
	$results[10] = `modelEditor -q -hu $currentPanel`; $results[11] = `modelEditor -q -ikh $currentPanel`;
	$results[12] = `modelEditor -q -df $currentPanel`; $results[13] = `modelEditor -q -hs $currentPanel`;
	$results[14] = `modelEditor -q -dy $currentPanel`; $results[15] = `modelEditor -q -fo $currentPanel`;
	$results[16] = `modelEditor -q -fl $currentPanel`; $results[17] = `modelEditor -q -lc $currentPanel`;
	$results[18] = `modelEditor -q -dim $currentPanel`; $results[19] = `modelEditor -q -pv $currentPanel`;
	$results[20] = `modelEditor -q -ha $currentPanel`; $results[21] = `modelEditor -q -tx $currentPanel`;
	$results[22] = `modelEditor -q -str $currentPanel`;		
	
	return $results;
}

//*****************************************************************
// Name: cie_ViewportSetDisplay
// Desc: Sets the current display options
//*****************************************************************
global proc cie_atbViewportSetDisplay( string $currentPanel, int $options[] )
{
	modelEditor -e -nc $options[0] $currentPanel;
	modelEditor -e -ns $options[1] $currentPanel;
	modelEditor -e -pm $options[2] $currentPanel; modelEditor -e -sds $options[3] $currentPanel;
	modelEditor -e -pl $options[4] $currentPanel; modelEditor -e -lt $options[5] $currentPanel;
	modelEditor -e -ca $options[6] $currentPanel; modelEditor -e -cv $options[7] $currentPanel;
	modelEditor -e -gr $options[8] $currentPanel; modelEditor -e -j $options[9] $currentPanel;
	modelEditor -e -hu $options[10] $currentPanel; modelEditor -e -ikh $options[11] $currentPanel;
	modelEditor -e -df $options[12] $currentPanel; modelEditor -e -hs $options[13] $currentPanel;
	modelEditor -e -dy $options[14] $currentPanel; modelEditor -e -fo $options[15] $currentPanel;
	modelEditor -e -fl $options[16] $currentPanel; modelEditor -e -lc $options[17] $currentPanel;
	modelEditor -e -dim $options[18] $currentPanel; modelEditor -e -pv $options[19] $currentPanel;
	modelEditor -e -ha $options[20] $currentPanel; modelEditor -e -tx $options[21] $currentPanel;
	modelEditor -e -str $options[22] $currentPanel;				
}

//*****************************************************************
// Name: cie_atbCleanTangents
// Desc: For keys that are peaks and valleys on the anim curve
//       their tangent type will be set to flat. The remaining
//       curves are set to spline with the first and last keys'
//       tangents determined by the UI value
//*****************************************************************
global proc cie_atbCleanTangents()
{
	global string $g_cieATBCrvCleanerStartEndCB;
	global string $g_cieATBCrvCleanerFactorFSG;
	global string $g_cieATBCrvCleanerSoftnessFSG;
	global string $g_cieATBCrvCleanerSoftenAllCB;
	
	int $splineStartEndKeys = `checkBox -q -v $g_cieATBCrvCleanerStartEndCB`;
	float $weightFactor = `floatSliderGrp -q -v $g_cieATBCrvCleanerFactorFSG`;
	float $smoothness = `floatSliderGrp -q -v $g_cieATBCrvCleanerSoftnessFSG`;
	int $softenAllSplines = `checkBox -q -v $g_cieATBCrvCleanerSoftenAllCB`;
	
	cieCleanCurves -t -sse $splineStartEndKeys -wf $weightFactor -s $smoothness -sas $softenAllSplines;
	
	cie_atbRestoreWindowFocus();
}


//*****************************************************************
// Name: cie_atbUpdateScriptJobState
// Desc: Updates the state of the script jobs based on the 
//       menu bar option
//*****************************************************************
global proc cie_atbUpdateScriptJobState()
{
	
	global string $g_cieATBEnableScriptJobMenuPath;
	global int $g_cieATBTimeChangeJobNum;
	global string $g_cieATBRetimingInfoCBPath;
	
	int $isEnabled = `menuItem -q -cb $g_cieATBEnableScriptJobMenuPath`;
	
	// It should be enabled, but it isn't, start it
	if( $isEnabled && $g_cieATBTimeChangeJobNum == -1 )
		cie_atbCreateScriptJobs();
	// It shouldn't be enabled, but it is, kill it
	else if( !$isEnabled && $g_cieATBTimeChangeJobNum != -1 )
		cie_atbKillScriptJobs();
	
	checkBox -e -enable $isEnabled $g_cieATBRetimingInfoCBPath;
}


//*****************************************************************
// Character Set Helpers
//*****************************************************************
//*****************************************************************
// Name: cie_atbGetActiveCharacterSets
// Desc: Create a list of the currently active character set
//       and its subsets
//*****************************************************************
global proc string[] cie_atbGetActiveCharacterSets()
{
	string $results[];
	
	$results = `currentCharacters`;

	if( size($results) > 0 )
		$results = stringArrayCatenate( $results, cie_atbGetSubCharacterSets( $results[0] ) );

	return $results;
}

//*****************************************************************
// Name: cie_atbGetSelectedCharacterSets
// Desc: Create a list of selected character sets and 
//       their subsets
//*****************************************************************
global proc string[] cie_atbGetSelectedCharacterSets()
{
	string $results[];
	
	string $selected[] = `ls -sl`;
	
	string $object;
	for( $object in $selected )
	{
		if( `nodeType $object`	== "character" ) {
			$results[size($results)] = $object;
			$results = stringArrayCatenate( $results, cie_atbGetSubCharacterSets( $object ));	
		}
	}
	
	return $results;
}

//*****************************************************************
// Name: cie_atbGetSubCharacterSets
// Desc: Recursively creates a list of sub character sets
//*****************************************************************
global proc string[] cie_atbGetSubCharacterSets( string $characterSet )
{
	string $results[] = {};
	string $subCharacterSet[] = `character -q -no $characterSet`;

	string $node;
	for( $node in $subCharacterSet )
	{
		
		if( `nodeType $node` == "character" ) {
			$results[size($results)] = $node;
			$results = stringArrayCatenate( $results, cie_atbGetSubCharacterSets( $node ));
		}
	}
	
	return $results;
}


//*****************************************************************
// ABOUT
//*****************************************************************
//*****************************************************************
// Name: cie_atbDisplayAboutWindow
// Desc: Creates ANIMToolbox About Window
//*****************************************************************
global proc cie_atbDisplayAboutWindow()
{
	global string $g_cieAboutUIWindowName;
	global string $g_cieATBAboutWindowTitle;
	
	if( `window -ex $g_cieAboutUIWindowName` )
		deleteUI $g_cieAboutUIWindowName;
	
	window
		-title $g_cieATBAboutWindowTitle
		-width 270
		-height 200
		-sizeable false
		$g_cieAboutUIWindowName;
	
	string $name = `cieAbout -n`;
	string $version = `cieAbout -v`;
	string $copyright = `cieAbout -c`;
	
	columnLayout -columnAttach "left" 5 -columnAlign "center" -rowSpacing 5;
	text -l "" -h 20;
	text -w 250 -l $name; 
	text -w 250 -l (" Version " + $version);
	text -w 250 -l $copyright;
	text -w 250 -l "All Rights Reserved";
	
	showWindow $g_cieAboutUIWindowName;
}



//*****************************************************************
// SCRIPT JOBS
//*****************************************************************
//*****************************************************************
// Name: cie_atbCreateScriptJobs
// Desc: Creates ANIMToolbox scriptJobs
//*****************************************************************
global proc cie_atbCreateScriptJobs()
{
	global int $g_cieATBTimeChangeJobNum;
	global int $g_cieATBSceneOpenedJobNum;
	
	if( $g_cieATBTimeChangeJobNum == -1 )
		$g_cieATBTimeChangeJobNum = `scriptJob -e timeChanged cie_atbTimeChangedCallback`;
	
	if( $g_cieATBSceneOpenedJobNum == -1 )
		$g_cieATBSceneOpenedJobNum = `scriptJob -e SceneOpened cie_atbSceneOpenedCallback`;
}

//*****************************************************************
// Name: cie_atbCreateScriptJobs
// Desc: Kills ANIMToolbox scriptJobs
//*****************************************************************
global proc cie_atbKillScriptJobs()
{
	global int $g_cieATBTimeChangeJobNum;
	global int $g_cieATBSceneOpenedJobNum;

	// Kill the Time Change Script Job
	if( `scriptJob -ex $g_cieATBTimeChangeJobNum` ) {
		scriptJob -k $g_cieATBTimeChangeJobNum;
		$g_cieATBTimeChangeJobNum = -1;	
	}
	
	// Kill the Scene Opened Script Job
	if( `scriptJob -ex $g_cieATBSceneOpenedJobNum` ) {
		scriptJob -k $g_cieATBSceneOpenedJobNum;
		$g_cieATBSceneOpenedJobNum = -1;	
	}
}



//*****************************************************************
// Name: cie_atbTimeChangedCallback
// Desc: Actions performed when the time slider changes
//       Ignored during playback
//*****************************************************************
global proc cie_atbTimeChangedCallback()
{
	global string $g_cieATBBreakdownSliderPath;
	global string $g_cieATBBreakdownFieldPath;
	global string $g_cieATBRetimingFieldPath;
	global string $g_cieATBRetimingInfoCBPath;
	
	// Reset the breakdown values
	if( $g_cieATBBreakdownSliderPath != "" && $g_cieATBBreakdownFieldPath != "" ) {
		
		if( `intSlider -ex $g_cieATBBreakdownSliderPath` )
			intSlider -e -v 0 $g_cieATBBreakdownSliderPath;
		
		if( `intField -ex $g_cieATBBreakdownFieldPath` )
			intField -e -v 0 $g_cieATBBreakdownFieldPath;		
	}
	
	// Updates the retiming info
	if( $g_cieATBRetimingInfoCBPath != "" ) {
		if( `checkBox -ex $g_cieATBRetimingInfoCBPath` ) {
			if( `checkBox -q -v $g_cieATBRetimingInfoCBPath` )
				cie_atbUpdateRetimingInfo();
		}
	}
	
	// Uncomment to reset the timing text field when 
	// the time changes
	//if( $g_cieATBRetimingFieldPath != "" ) {
	//	if( `intField -ex $g_cieATBRetimingFieldPath` ) {
	//		intField -e -v 1 $g_cieATBRetimingFieldPath;	
	//	}
	//}	
}

//*****************************************************************
// Name: cie_atbSceneOpenedCallback
// Desc: Actions performed when Maya opens a scene
//*****************************************************************
global proc cie_atbSceneOpenedCallback()
{
	// Sync the shot mask details if available
	cie_atbShotMaskSyncDetails();	
}
